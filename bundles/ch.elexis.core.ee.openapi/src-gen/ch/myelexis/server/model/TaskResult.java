/*
 * myElexis-Server API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.myelexis.server.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * TaskResult
 */
@JsonPropertyOrder({
  TaskResult.JSON_PROPERTY_ID,
  TaskResult.JSON_PROPERTY_STATE,
  TaskResult.JSON_PROPERTY_TASK_ID,
  TaskResult.JSON_PROPERTY_TASK_REFERENCE_ID,
  TaskResult.JSON_PROPERTY_CREATE_TIME,
  TaskResult.JSON_PROPERTY_FINISH_TIME,
  TaskResult.JSON_PROPERTY_RUN_CONTEXT,
  TaskResult.JSON_PROPERTY_RESULT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-14T13:28:11.344655+02:00[Europe/Vienna]", comments = "Generator version: 7.16.0")
public class TaskResult {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nullable
  private String id;

  public static final String JSON_PROPERTY_STATE = "state";
  @jakarta.annotation.Nullable
  private TaskState state;

  public static final String JSON_PROPERTY_TASK_ID = "taskId";
  @jakarta.annotation.Nullable
  private String taskId;

  public static final String JSON_PROPERTY_TASK_REFERENCE_ID = "taskReferenceId";
  @jakarta.annotation.Nullable
  private String taskReferenceId;

  public static final String JSON_PROPERTY_CREATE_TIME = "createTime";
  @jakarta.annotation.Nullable
  private OffsetDateTime createTime;

  public static final String JSON_PROPERTY_FINISH_TIME = "finishTime";
  @jakarta.annotation.Nullable
  private OffsetDateTime finishTime;

  public static final String JSON_PROPERTY_RUN_CONTEXT = "runContext";
  @jakarta.annotation.Nullable
  private Map<String, String> runContext = new HashMap<>();

  public static final String JSON_PROPERTY_RESULT = "result";
  @jakarta.annotation.Nullable
  private String result;

  public TaskResult() {
  }

  public TaskResult id(@jakarta.annotation.Nullable String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(value = JSON_PROPERTY_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@jakarta.annotation.Nullable String id) {
    this.id = id;
  }

  public TaskResult state(@jakarta.annotation.Nullable TaskState state) {
    
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_STATE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TaskState getState() {
    return state;
  }


  @JsonProperty(value = JSON_PROPERTY_STATE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(@jakarta.annotation.Nullable TaskState state) {
    this.state = state;
  }

  public TaskResult taskId(@jakarta.annotation.Nullable String taskId) {
    
    this.taskId = taskId;
    return this;
  }

  /**
   * Get taskId
   * @return taskId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_TASK_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaskId() {
    return taskId;
  }


  @JsonProperty(value = JSON_PROPERTY_TASK_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskId(@jakarta.annotation.Nullable String taskId) {
    this.taskId = taskId;
  }

  public TaskResult taskReferenceId(@jakarta.annotation.Nullable String taskReferenceId) {
    
    this.taskReferenceId = taskReferenceId;
    return this;
  }

  /**
   * Get taskReferenceId
   * @return taskReferenceId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_TASK_REFERENCE_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaskReferenceId() {
    return taskReferenceId;
  }


  @JsonProperty(value = JSON_PROPERTY_TASK_REFERENCE_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaskReferenceId(@jakarta.annotation.Nullable String taskReferenceId) {
    this.taskReferenceId = taskReferenceId;
  }

  public TaskResult createTime(@jakarta.annotation.Nullable OffsetDateTime createTime) {
    
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_CREATE_TIME, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreateTime() {
    return createTime;
  }


  @JsonProperty(value = JSON_PROPERTY_CREATE_TIME, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateTime(@jakarta.annotation.Nullable OffsetDateTime createTime) {
    this.createTime = createTime;
  }

  public TaskResult finishTime(@jakarta.annotation.Nullable OffsetDateTime finishTime) {
    
    this.finishTime = finishTime;
    return this;
  }

  /**
   * Get finishTime
   * @return finishTime
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_FINISH_TIME, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getFinishTime() {
    return finishTime;
  }


  @JsonProperty(value = JSON_PROPERTY_FINISH_TIME, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFinishTime(@jakarta.annotation.Nullable OffsetDateTime finishTime) {
    this.finishTime = finishTime;
  }

  public TaskResult runContext(@jakarta.annotation.Nullable Map<String, String> runContext) {
    
    this.runContext = runContext;
    return this;
  }

  public TaskResult putRunContextItem(String key, String runContextItem) {
    if (this.runContext == null) {
      this.runContext = new HashMap<>();
    }
    this.runContext.put(key, runContextItem);
    return this;
  }

  /**
   * Get runContext
   * @return runContext
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_RUN_CONTEXT, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getRunContext() {
    return runContext;
  }


  @JsonProperty(value = JSON_PROPERTY_RUN_CONTEXT, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRunContext(@jakarta.annotation.Nullable Map<String, String> runContext) {
    this.runContext = runContext;
  }

  public TaskResult result(@jakarta.annotation.Nullable String result) {
    
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_RESULT, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getResult() {
    return result;
  }


  @JsonProperty(value = JSON_PROPERTY_RESULT, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResult(@jakarta.annotation.Nullable String result) {
    this.result = result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskResult taskResult = (TaskResult) o;
    return Objects.equals(this.id, taskResult.id) &&
        Objects.equals(this.state, taskResult.state) &&
        Objects.equals(this.taskId, taskResult.taskId) &&
        Objects.equals(this.taskReferenceId, taskResult.taskReferenceId) &&
        Objects.equals(this.createTime, taskResult.createTime) &&
        Objects.equals(this.finishTime, taskResult.finishTime) &&
        Objects.equals(this.runContext, taskResult.runContext) &&
        Objects.equals(this.result, taskResult.result);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, state, taskId, taskReferenceId, createTime, finishTime, runContext, result);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskResult {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    taskReferenceId: ").append(toIndentedString(taskReferenceId)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    finishTime: ").append(toIndentedString(finishTime)).append("\n");
    sb.append("    runContext: ").append(toIndentedString(runContext)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `state` to the URL query string
    if (getState() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%sstate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getState()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `taskId` to the URL query string
    if (getTaskId() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%staskId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTaskId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `taskReferenceId` to the URL query string
    if (getTaskReferenceId() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%staskReferenceId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTaskReferenceId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `createTime` to the URL query string
    if (getCreateTime() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%screateTime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreateTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `finishTime` to the URL query string
    if (getFinishTime() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%sfinishTime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFinishTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `runContext` to the URL query string
    if (getRunContext() != null) {
      for (String _key : getRunContext().keySet()) {
        try {
          joiner.add(String.format(Locale.ROOT, "%srunContext%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format(Locale.ROOT, "%s%d%s", containerPrefix, _key, containerSuffix),
              getRunContext().get(_key), URLEncoder.encode(String.valueOf(getRunContext().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `result` to the URL query string
    if (getResult() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%sresult%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResult()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

