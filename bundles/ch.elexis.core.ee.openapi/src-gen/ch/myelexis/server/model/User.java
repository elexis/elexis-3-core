/*
 * server API
 * Created from Annotated Buildtime filter with 19155 known indexed classes
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.myelexis.server.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import ch.myelexis.server.client.ApiClient;
/**
 * User
 */
@JsonPropertyOrder({
  User.JSON_PROPERTY_ID,
  User.JSON_PROPERTY_FIRST_NAME,
  User.JSON_PROPERTY_FAMILY_NAME,
  User.JSON_PROPERTY_EMAIL,
  User.JSON_PROPERTY_ASSOCIATED_CONTACT_ID,
  User.JSON_PROPERTY_ROLES,
  User.JSON_PROPERTY_GROUPS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-01T13:09:01.232453+02:00[Europe/Vienna]", comments = "Generator version: 7.16.0")
public class User {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nonnull
  private String id;

  public static final String JSON_PROPERTY_FIRST_NAME = "firstName";
  @jakarta.annotation.Nullable
  private String firstName;

  public static final String JSON_PROPERTY_FAMILY_NAME = "familyName";
  @jakarta.annotation.Nullable
  private String familyName;

  public static final String JSON_PROPERTY_EMAIL = "email";
  @jakarta.annotation.Nonnull
  private String email;

  public static final String JSON_PROPERTY_ASSOCIATED_CONTACT_ID = "associatedContactId";
  @jakarta.annotation.Nullable
  private String associatedContactId;

  public static final String JSON_PROPERTY_ROLES = "roles";
  @jakarta.annotation.Nullable
  private Set<String> roles = new LinkedHashSet<>();

  public static final String JSON_PROPERTY_GROUPS = "groups";
  @jakarta.annotation.Nullable
  private Set<String> groups = new LinkedHashSet<>();

  public User() { 
  }

  public User id(@jakarta.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier / username of the user.
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_ID, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getId() {
    return id;
  }


  @JsonProperty(value = JSON_PROPERTY_ID, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@jakarta.annotation.Nonnull String id) {
    this.id = id;
  }


  public User firstName(@jakarta.annotation.Nullable String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first name of the user.
   * @return firstName
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_FIRST_NAME, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getFirstName() {
    return firstName;
  }


  @JsonProperty(value = JSON_PROPERTY_FIRST_NAME, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFirstName(@jakarta.annotation.Nullable String firstName) {
    this.firstName = firstName;
  }


  public User familyName(@jakarta.annotation.Nullable String familyName) {
    this.familyName = familyName;
    return this;
  }

  /**
   * The family name of the user.
   * @return familyName
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_FAMILY_NAME, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getFamilyName() {
    return familyName;
  }


  @JsonProperty(value = JSON_PROPERTY_FAMILY_NAME, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFamilyName(@jakarta.annotation.Nullable String familyName) {
    this.familyName = familyName;
  }


  public User email(@jakarta.annotation.Nonnull String email) {
    this.email = email;
    return this;
  }

  /**
   * The email of the user.
   * @return email
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_EMAIL, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getEmail() {
    return email;
  }


  @JsonProperty(value = JSON_PROPERTY_EMAIL, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmail(@jakarta.annotation.Nonnull String email) {
    this.email = email;
  }


  public User associatedContactId(@jakarta.annotation.Nullable String associatedContactId) {
    this.associatedContactId = associatedContactId;
    return this;
  }

  /**
   * The id of the associated contact, if used during create &#x60;firstName&#x60;, &#x60;familyName&#x60; and &#x60;email&#x60; are ignored.
   * @return associatedContactId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_ASSOCIATED_CONTACT_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getAssociatedContactId() {
    return associatedContactId;
  }


  @JsonProperty(value = JSON_PROPERTY_ASSOCIATED_CONTACT_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAssociatedContactId(@jakarta.annotation.Nullable String associatedContactId) {
    this.associatedContactId = associatedContactId;
  }


  public User roles(@jakarta.annotation.Nullable Set<String> roles) {
    this.roles = roles;
    return this;
  }

  public User addRolesItem(String rolesItem) {
    if (this.roles == null) {
      this.roles = new LinkedHashSet<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * The access roles assigned to the user.
   * @return roles
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_ROLES, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Set<String> getRoles() {
    return roles;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(value = JSON_PROPERTY_ROLES, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoles(@jakarta.annotation.Nullable Set<String> roles) {
    this.roles = roles;
  }


  public User groups(@jakarta.annotation.Nullable Set<String> groups) {
    this.groups = groups;
    return this;
  }

  public User addGroupsItem(String groupsItem) {
    if (this.groups == null) {
      this.groups = new LinkedHashSet<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * The groups this user belongs to.
   * @return groups
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_GROUPS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Set<String> getGroups() {
    return groups;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(value = JSON_PROPERTY_GROUPS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroups(@jakarta.annotation.Nullable Set<String> groups) {
    this.groups = groups;
  }


  /**
   * Return true if this User object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.id, user.id) &&
        Objects.equals(this.firstName, user.firstName) &&
        Objects.equals(this.familyName, user.familyName) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.associatedContactId, user.associatedContactId) &&
        Objects.equals(this.roles, user.roles) &&
        Objects.equals(this.groups, user.groups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, firstName, familyName, email, associatedContactId, roles, groups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    familyName: ").append(toIndentedString(familyName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    associatedContactId: ").append(toIndentedString(associatedContactId)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format(Locale.ROOT, "%sid%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `firstName` to the URL query string
    if (getFirstName() != null) {
      joiner.add(String.format(Locale.ROOT, "%sfirstName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFirstName()))));
    }

    // add `familyName` to the URL query string
    if (getFamilyName() != null) {
      joiner.add(String.format(Locale.ROOT, "%sfamilyName%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFamilyName()))));
    }

    // add `email` to the URL query string
    if (getEmail() != null) {
      joiner.add(String.format(Locale.ROOT, "%semail%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getEmail()))));
    }

    // add `associatedContactId` to the URL query string
    if (getAssociatedContactId() != null) {
      joiner.add(String.format(Locale.ROOT, "%sassociatedContactId%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getAssociatedContactId()))));
    }

    // add `roles` to the URL query string
    if (getRoles() != null) {
      int i = 0;
      for (String _item : getRoles()) {
        joiner.add(String.format(Locale.ROOT, "%sroles%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format(Locale.ROOT, "%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(_item))));
      }
      i++;
    }

    // add `groups` to the URL query string
    if (getGroups() != null) {
      int i = 0;
      for (String _item : getGroups()) {
        joiner.add(String.format(Locale.ROOT, "%sgroups%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format(Locale.ROOT, "%s%d%s", containerPrefix, i, containerSuffix),
            ApiClient.urlEncode(ApiClient.valueToString(_item))));
      }
      i++;
    }

    return joiner.toString();
  }
}

