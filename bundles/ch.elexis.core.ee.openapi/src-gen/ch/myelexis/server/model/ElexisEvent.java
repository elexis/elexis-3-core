/*
 * myElexis-Server API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.myelexis.server.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * ElexisEvent
 */
@JsonPropertyOrder({
  ElexisEvent.JSON_PROPERTY_TOPIC,
  ElexisEvent.JSON_PROPERTY_PROPERTIES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-14T13:28:11.344655+02:00[Europe/Vienna]", comments = "Generator version: 7.16.0")
public class ElexisEvent {
  public static final String JSON_PROPERTY_TOPIC = "topic";
  @jakarta.annotation.Nullable
  private String topic;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  @jakarta.annotation.Nullable
  private Map<String, String> properties = new HashMap<>();

  public ElexisEvent() {
  }

  public ElexisEvent topic(@jakarta.annotation.Nullable String topic) {
    
    this.topic = topic;
    return this;
  }

  /**
   * Get topic
   * @return topic
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_TOPIC, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTopic() {
    return topic;
  }


  @JsonProperty(value = JSON_PROPERTY_TOPIC, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTopic(@jakarta.annotation.Nullable String topic) {
    this.topic = topic;
  }

  public ElexisEvent properties(@jakarta.annotation.Nullable Map<String, String> properties) {
    
    this.properties = properties;
    return this;
  }

  public ElexisEvent putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_PROPERTIES, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getProperties() {
    return properties;
  }


  @JsonProperty(value = JSON_PROPERTY_PROPERTIES, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(@jakarta.annotation.Nullable Map<String, String> properties) {
    this.properties = properties;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElexisEvent elexisEvent = (ElexisEvent) o;
    return Objects.equals(this.topic, elexisEvent.topic) &&
        Objects.equals(this.properties, elexisEvent.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(topic, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElexisEvent {\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `topic` to the URL query string
    if (getTopic() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%stopic%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTopic()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `properties` to the URL query string
    if (getProperties() != null) {
      for (String _key : getProperties().keySet()) {
        try {
          joiner.add(String.format(Locale.ROOT, "%sproperties%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format(Locale.ROOT, "%s%d%s", containerPrefix, _key, containerSuffix),
              getProperties().get(_key), URLEncoder.encode(String.valueOf(getProperties().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

