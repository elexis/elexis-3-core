/*
 * myElexis-Server API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.myelexis.server.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import java.util.Locale;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import ch.myelexis.server.client.ApiClient;
/**
 * IdentifiedRunnable
 */
@JsonPropertyOrder({
  IdentifiedRunnable.JSON_PROPERTY_ID,
  IdentifiedRunnable.JSON_PROPERTY_SINGLETON,
  IdentifiedRunnable.JSON_PROPERTY_DESCRIPTION,
  IdentifiedRunnable.JSON_PROPERTY_DEFAULT_RUN_CONTEXT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-06T12:40:32.737785+02:00[Europe/Vienna]", comments = "Generator version: 7.16.0")
public class IdentifiedRunnable {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nullable
  private String id;

  public static final String JSON_PROPERTY_SINGLETON = "singleton";
  @jakarta.annotation.Nullable
  private Boolean singleton;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @jakarta.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_DEFAULT_RUN_CONTEXT = "defaultRunContext";
  @jakarta.annotation.Nullable
  private Map<String, String> defaultRunContext = new HashMap<>();

  public IdentifiedRunnable() { 
  }

  public IdentifiedRunnable id(@jakarta.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }


  @JsonProperty(value = JSON_PROPERTY_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@jakarta.annotation.Nullable String id) {
    this.id = id;
  }


  public IdentifiedRunnable singleton(@jakarta.annotation.Nullable Boolean singleton) {
    this.singleton = singleton;
    return this;
  }

  /**
   * Get singleton
   * @return singleton
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_SINGLETON, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSingleton() {
    return singleton;
  }


  @JsonProperty(value = JSON_PROPERTY_SINGLETON, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSingleton(@jakarta.annotation.Nullable Boolean singleton) {
    this.singleton = singleton;
  }


  public IdentifiedRunnable description(@jakarta.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_DESCRIPTION, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDescription() {
    return description;
  }


  @JsonProperty(value = JSON_PROPERTY_DESCRIPTION, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }


  public IdentifiedRunnable defaultRunContext(@jakarta.annotation.Nullable Map<String, String> defaultRunContext) {
    this.defaultRunContext = defaultRunContext;
    return this;
  }

  public IdentifiedRunnable putDefaultRunContextItem(String key, String defaultRunContextItem) {
    if (this.defaultRunContext == null) {
      this.defaultRunContext = new HashMap<>();
    }
    this.defaultRunContext.put(key, defaultRunContextItem);
    return this;
  }

  /**
   * Get defaultRunContext
   * @return defaultRunContext
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_DEFAULT_RUN_CONTEXT, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getDefaultRunContext() {
    return defaultRunContext;
  }


  @JsonProperty(value = JSON_PROPERTY_DEFAULT_RUN_CONTEXT, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultRunContext(@jakarta.annotation.Nullable Map<String, String> defaultRunContext) {
    this.defaultRunContext = defaultRunContext;
  }


  /**
   * Return true if this IdentifiedRunnable object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentifiedRunnable identifiedRunnable = (IdentifiedRunnable) o;
    return Objects.equals(this.id, identifiedRunnable.id) &&
        Objects.equals(this.singleton, identifiedRunnable.singleton) &&
        Objects.equals(this.description, identifiedRunnable.description) &&
        Objects.equals(this.defaultRunContext, identifiedRunnable.defaultRunContext);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, singleton, description, defaultRunContext);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentifiedRunnable {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    singleton: ").append(toIndentedString(singleton)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    defaultRunContext: ").append(toIndentedString(defaultRunContext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format(Locale.ROOT, "%sid%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `singleton` to the URL query string
    if (getSingleton() != null) {
      joiner.add(String.format(Locale.ROOT, "%ssingleton%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSingleton()))));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format(Locale.ROOT, "%sdescription%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDescription()))));
    }

    // add `defaultRunContext` to the URL query string
    if (getDefaultRunContext() != null) {
      for (String _key : getDefaultRunContext().keySet()) {
        joiner.add(String.format(Locale.ROOT, "%sdefaultRunContext%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format(Locale.ROOT, "%s%d%s", containerPrefix, _key, containerSuffix),
            getDefaultRunContext().get(_key), ApiClient.urlEncode(ApiClient.valueToString(getDefaultRunContext().get(_key)))));
      }
    }

    return joiner.toString();
  }
}

