/*
 * myElexis-Server API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.myelexis.server.model;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Task
 */
@JsonPropertyOrder({
  Task.JSON_PROPERTY_ID,
  Task.JSON_PROPERTY_REFERENCE_ID,
  Task.JSON_PROPERTY_RUNNABLE_ID,
  Task.JSON_PROPERTY_TRIGGER_TYPE,
  Task.JSON_PROPERTY_TRIGGER_PARAMETERS,
  Task.JSON_PROPERTY_OWNER_ID,
  Task.JSON_PROPERTY_RUNNER,
  Task.JSON_PROPERTY_RUN_CONTEXT,
  Task.JSON_PROPERTY_NOTIFICATION_TYPE,
  Task.JSON_PROPERTY_SINGLETON,
  Task.JSON_PROPERTY_SYSTEM,
  Task.JSON_PROPERTY_ACTIVE,
  Task.JSON_PROPERTY_INCURRED,
  Task.JSON_PROPERTY_EXECUTION_INFO
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-14T13:28:11.344655+02:00[Europe/Vienna]", comments = "Generator version: 7.16.0")
public class Task {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nullable
  private String id;

  public static final String JSON_PROPERTY_REFERENCE_ID = "referenceId";
  @jakarta.annotation.Nullable
  private String referenceId;

  public static final String JSON_PROPERTY_RUNNABLE_ID = "runnableId";
  @jakarta.annotation.Nonnull
  private String runnableId;

  public static final String JSON_PROPERTY_TRIGGER_TYPE = "triggerType";
  @jakarta.annotation.Nonnull
  private TaskTriggerType triggerType;

  public static final String JSON_PROPERTY_TRIGGER_PARAMETERS = "triggerParameters";
  @jakarta.annotation.Nullable
  private Map<String, String> triggerParameters = new HashMap<>();

  public static final String JSON_PROPERTY_OWNER_ID = "ownerId";
  @jakarta.annotation.Nonnull
  private String ownerId;

  public static final String JSON_PROPERTY_RUNNER = "runner";
  @jakarta.annotation.Nonnull
  private String runner;

  public static final String JSON_PROPERTY_RUN_CONTEXT = "runContext";
  @jakarta.annotation.Nullable
  private Map<String, String> runContext = new HashMap<>();

  public static final String JSON_PROPERTY_NOTIFICATION_TYPE = "notificationType";
  @jakarta.annotation.Nonnull
  private OwnerTaskNotification notificationType;

  public static final String JSON_PROPERTY_SINGLETON = "singleton";
  @jakarta.annotation.Nullable
  private Boolean singleton;

  public static final String JSON_PROPERTY_SYSTEM = "system";
  @jakarta.annotation.Nullable
  private Boolean system;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  @jakarta.annotation.Nullable
  private Boolean active;

  public static final String JSON_PROPERTY_INCURRED = "incurred";
  @jakarta.annotation.Nullable
  private Boolean incurred;

  public static final String JSON_PROPERTY_EXECUTION_INFO = "executionInfo";
  @jakarta.annotation.Nullable
  private String executionInfo;

  public Task() {
  }

  public Task id(@jakarta.annotation.Nullable String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(value = JSON_PROPERTY_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@jakarta.annotation.Nullable String id) {
    this.id = id;
  }

  public Task referenceId(@jakarta.annotation.Nullable String referenceId) {
    
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_REFERENCE_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReferenceId() {
    return referenceId;
  }


  @JsonProperty(value = JSON_PROPERTY_REFERENCE_ID, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReferenceId(@jakarta.annotation.Nullable String referenceId) {
    this.referenceId = referenceId;
  }

  public Task runnableId(@jakarta.annotation.Nonnull String runnableId) {
    
    this.runnableId = runnableId;
    return this;
  }

  /**
   * The runnable to execute.
   * @return runnableId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_RUNNABLE_ID, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRunnableId() {
    return runnableId;
  }


  @JsonProperty(value = JSON_PROPERTY_RUNNABLE_ID, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRunnableId(@jakarta.annotation.Nonnull String runnableId) {
    this.runnableId = runnableId;
  }

  public Task triggerType(@jakarta.annotation.Nonnull TaskTriggerType triggerType) {
    
    this.triggerType = triggerType;
    return this;
  }

  /**
   * Get triggerType
   * @return triggerType
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_TRIGGER_TYPE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TaskTriggerType getTriggerType() {
    return triggerType;
  }


  @JsonProperty(value = JSON_PROPERTY_TRIGGER_TYPE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTriggerType(@jakarta.annotation.Nonnull TaskTriggerType triggerType) {
    this.triggerType = triggerType;
  }

  public Task triggerParameters(@jakarta.annotation.Nullable Map<String, String> triggerParameters) {
    
    this.triggerParameters = triggerParameters;
    return this;
  }

  public Task putTriggerParametersItem(String key, String triggerParametersItem) {
    if (this.triggerParameters == null) {
      this.triggerParameters = new HashMap<>();
    }
    this.triggerParameters.put(key, triggerParametersItem);
    return this;
  }

  /**
   * Get triggerParameters
   * @return triggerParameters
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_TRIGGER_PARAMETERS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getTriggerParameters() {
    return triggerParameters;
  }


  @JsonProperty(value = JSON_PROPERTY_TRIGGER_PARAMETERS, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTriggerParameters(@jakarta.annotation.Nullable Map<String, String> triggerParameters) {
    this.triggerParameters = triggerParameters;
  }

  public Task ownerId(@jakarta.annotation.Nonnull String ownerId) {
    
    this.ownerId = ownerId;
    return this;
  }

  /**
   * The owner of the task, determines the tasks rights. Only an &lt;code&gt;ict-administrator&lt;/code&gt; can set a task with a non-self owner.
   * @return ownerId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_OWNER_ID, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOwnerId() {
    return ownerId;
  }


  @JsonProperty(value = JSON_PROPERTY_OWNER_ID, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOwnerId(@jakarta.annotation.Nonnull String ownerId) {
    this.ownerId = ownerId;
  }

  public Task runner(@jakarta.annotation.Nonnull String runner) {
    
    this.runner = runner;
    return this;
  }

  /**
   * The runner responsible for executing this task. Defaults to &lt;code&gt;myelexis-server&lt;/code&gt; leaving it empty will execute it on any instance.
   * @return runner
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_RUNNER, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRunner() {
    return runner;
  }


  @JsonProperty(value = JSON_PROPERTY_RUNNER, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRunner(@jakarta.annotation.Nonnull String runner) {
    this.runner = runner;
  }

  public Task runContext(@jakarta.annotation.Nullable Map<String, String> runContext) {
    
    this.runContext = runContext;
    return this;
  }

  public Task putRunContextItem(String key, String runContextItem) {
    if (this.runContext == null) {
      this.runContext = new HashMap<>();
    }
    this.runContext.put(key, runContextItem);
    return this;
  }

  /**
   * Get runContext
   * @return runContext
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_RUN_CONTEXT, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getRunContext() {
    return runContext;
  }


  @JsonProperty(value = JSON_PROPERTY_RUN_CONTEXT, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRunContext(@jakarta.annotation.Nullable Map<String, String> runContext) {
    this.runContext = runContext;
  }

  public Task notificationType(@jakarta.annotation.Nonnull OwnerTaskNotification notificationType) {
    
    this.notificationType = notificationType;
    return this;
  }

  /**
   * Get notificationType
   * @return notificationType
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(value = JSON_PROPERTY_NOTIFICATION_TYPE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OwnerTaskNotification getNotificationType() {
    return notificationType;
  }


  @JsonProperty(value = JSON_PROPERTY_NOTIFICATION_TYPE, required = true)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNotificationType(@jakarta.annotation.Nonnull OwnerTaskNotification notificationType) {
    this.notificationType = notificationType;
  }

  public Task singleton(@jakarta.annotation.Nullable Boolean singleton) {
    
    this.singleton = singleton;
    return this;
  }

  /**
   * Get singleton
   * @return singleton
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_SINGLETON, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSingleton() {
    return singleton;
  }


  @JsonProperty(value = JSON_PROPERTY_SINGLETON, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSingleton(@jakarta.annotation.Nullable Boolean singleton) {
    this.singleton = singleton;
  }

  public Task system(@jakarta.annotation.Nullable Boolean system) {
    
    this.system = system;
    return this;
  }

  /**
   * Get system
   * @return system
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_SYSTEM, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSystem() {
    return system;
  }


  @JsonProperty(value = JSON_PROPERTY_SYSTEM, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSystem(@jakarta.annotation.Nullable Boolean system) {
    this.system = system;
  }

  public Task active(@jakarta.annotation.Nullable Boolean active) {
    
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_ACTIVE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(value = JSON_PROPERTY_ACTIVE, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(@jakarta.annotation.Nullable Boolean active) {
    this.active = active;
  }

  public Task incurred(@jakarta.annotation.Nullable Boolean incurred) {
    
    this.incurred = incurred;
    return this;
  }

  /**
   * Get incurred
   * @return incurred
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_INCURRED, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIncurred() {
    return incurred;
  }


  @JsonProperty(value = JSON_PROPERTY_INCURRED, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncurred(@jakarta.annotation.Nullable Boolean incurred) {
    this.incurred = incurred;
  }

  public Task executionInfo(@jakarta.annotation.Nullable String executionInfo) {
    
    this.executionInfo = executionInfo;
    return this;
  }

  /**
   * Get executionInfo
   * @return executionInfo
   */
  @jakarta.annotation.Nullable
  @JsonProperty(value = JSON_PROPERTY_EXECUTION_INFO, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExecutionInfo() {
    return executionInfo;
  }


  @JsonProperty(value = JSON_PROPERTY_EXECUTION_INFO, required = false)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExecutionInfo(@jakarta.annotation.Nullable String executionInfo) {
    this.executionInfo = executionInfo;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Task task = (Task) o;
    return Objects.equals(this.id, task.id) &&
        Objects.equals(this.referenceId, task.referenceId) &&
        Objects.equals(this.runnableId, task.runnableId) &&
        Objects.equals(this.triggerType, task.triggerType) &&
        Objects.equals(this.triggerParameters, task.triggerParameters) &&
        Objects.equals(this.ownerId, task.ownerId) &&
        Objects.equals(this.runner, task.runner) &&
        Objects.equals(this.runContext, task.runContext) &&
        Objects.equals(this.notificationType, task.notificationType) &&
        Objects.equals(this.singleton, task.singleton) &&
        Objects.equals(this.system, task.system) &&
        Objects.equals(this.active, task.active) &&
        Objects.equals(this.incurred, task.incurred) &&
        Objects.equals(this.executionInfo, task.executionInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, referenceId, runnableId, triggerType, triggerParameters, ownerId, runner, runContext, notificationType, singleton, system, active, incurred, executionInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Task {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    runnableId: ").append(toIndentedString(runnableId)).append("\n");
    sb.append("    triggerType: ").append(toIndentedString(triggerType)).append("\n");
    sb.append("    triggerParameters: ").append(toIndentedString(triggerParameters)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    runner: ").append(toIndentedString(runner)).append("\n");
    sb.append("    runContext: ").append(toIndentedString(runContext)).append("\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("    singleton: ").append(toIndentedString(singleton)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    incurred: ").append(toIndentedString(incurred)).append("\n");
    sb.append("    executionInfo: ").append(toIndentedString(executionInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `referenceId` to the URL query string
    if (getReferenceId() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%sreferenceId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReferenceId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `runnableId` to the URL query string
    if (getRunnableId() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%srunnableId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRunnableId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `triggerType` to the URL query string
    if (getTriggerType() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%striggerType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTriggerType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `triggerParameters` to the URL query string
    if (getTriggerParameters() != null) {
      for (String _key : getTriggerParameters().keySet()) {
        try {
          joiner.add(String.format(Locale.ROOT, "%striggerParameters%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format(Locale.ROOT, "%s%d%s", containerPrefix, _key, containerSuffix),
              getTriggerParameters().get(_key), URLEncoder.encode(String.valueOf(getTriggerParameters().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `ownerId` to the URL query string
    if (getOwnerId() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%sownerId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOwnerId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `runner` to the URL query string
    if (getRunner() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%srunner%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRunner()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `runContext` to the URL query string
    if (getRunContext() != null) {
      for (String _key : getRunContext().keySet()) {
        try {
          joiner.add(String.format(Locale.ROOT, "%srunContext%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format(Locale.ROOT, "%s%d%s", containerPrefix, _key, containerSuffix),
              getRunContext().get(_key), URLEncoder.encode(String.valueOf(getRunContext().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `notificationType` to the URL query string
    if (getNotificationType() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%snotificationType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNotificationType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `singleton` to the URL query string
    if (getSingleton() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%ssingleton%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSingleton()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `system` to the URL query string
    if (getSystem() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%ssystem%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSystem()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `active` to the URL query string
    if (getActive() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%sactive%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getActive()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `incurred` to the URL query string
    if (getIncurred() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%sincurred%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIncurred()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `executionInfo` to the URL query string
    if (getExecutionInfo() != null) {
      try {
        joiner.add(String.format(Locale.ROOT, "%sexecutionInfo%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExecutionInfo()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

