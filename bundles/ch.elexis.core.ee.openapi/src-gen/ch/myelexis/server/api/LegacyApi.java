/*
 * myElexis-Server API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package ch.myelexis.server.api;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

import com.fasterxml.jackson.core.type.TypeReference;

import ch.myelexis.server.client.ApiClient;
import ch.myelexis.server.client.ApiException;
import ch.myelexis.server.client.BaseApi;
import ch.myelexis.server.client.Configuration;
import ch.myelexis.server.client.Pair;
import ch.myelexis.server.model.ElexisEvent;
import ch.myelexis.server.model.LockInfo;
import ch.myelexis.server.model.LockRequest;
import ch.myelexis.server.model.LockResponse;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-14T13:28:11.344655+02:00[Europe/Vienna]", comments = "Generator version: 7.16.0")
public class LegacyApi extends BaseApi {

  public LegacyApi() {
    super(Configuration.getDefaultApiClient());
  }

  public LegacyApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * 
   * 
   * @param lockRequest  (required)
   * @return LockResponse
   * @throws ApiException if fails to make API call
   */
  public LockResponse acquireOrReleaseLocks(@jakarta.annotation.Nonnull LockRequest lockRequest) throws ApiException {
    return this.acquireOrReleaseLocks(lockRequest, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param lockRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return LockResponse
   * @throws ApiException if fails to make API call
   */
  public LockResponse acquireOrReleaseLocks(@jakarta.annotation.Nonnull LockRequest lockRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = lockRequest;
    
    // verify the required parameter 'lockRequest' is set
    if (lockRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'lockRequest' when calling acquireOrReleaseLocks");
    }
    
    // create path and map variables
    String localVarPath = "/services/elexis/lockservice/acquireOrReleaseLocks";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/xml"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<LockResponse> localVarReturnType = new TypeReference<LockResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param objectId  (optional)
   * @return LockInfo
   * @throws ApiException if fails to make API call
   */
  public LockInfo getLockInfo(@jakarta.annotation.Nullable String objectId) throws ApiException {
    return this.getLockInfo(objectId, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param objectId  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return LockInfo
   * @throws ApiException if fails to make API call
   */
  public LockInfo getLockInfo(@jakarta.annotation.Nullable String objectId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/services/elexis/lockservice/lockInfo";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("objectId", objectId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<LockInfo> localVarReturnType = new TypeReference<LockInfo>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param lockRequest  (required)
   * @return Boolean
   * @throws ApiException if fails to make API call
   */
  public Boolean isLocked(@jakarta.annotation.Nonnull LockRequest lockRequest) throws ApiException {
    return this.isLocked(lockRequest, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param lockRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Boolean
   * @throws ApiException if fails to make API call
   */
  public Boolean isLocked(@jakarta.annotation.Nonnull LockRequest lockRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = lockRequest;
    
    // verify the required parameter 'lockRequest' is set
    if (lockRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'lockRequest' when calling isLocked");
    }
    
    // create path and map variables
    String localVarPath = "/services/elexis/lockservice/isLocked";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/xml"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Boolean> localVarReturnType = new TypeReference<Boolean>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * 
   * 
   * @param elexisEvent  (required)
   * @throws ApiException if fails to make API call
   */
  public void postEvent(@jakarta.annotation.Nonnull ElexisEvent elexisEvent) throws ApiException {
    this.postEvent(elexisEvent, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param elexisEvent  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void postEvent(@jakarta.annotation.Nonnull ElexisEvent elexisEvent, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = elexisEvent;
    
    // verify the required parameter 'elexisEvent' is set
    if (elexisEvent == null) {
      throw new ApiException(400, "Missing the required parameter 'elexisEvent' when calling postEvent");
    }
    
    // create path and map variables
    String localVarPath = "/services/elexis/eventservice/postEvent";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/xml"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/xml"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
