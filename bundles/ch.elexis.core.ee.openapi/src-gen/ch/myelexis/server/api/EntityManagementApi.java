/*
 * myElexis-Server API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package ch.myelexis.server.api;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

import com.fasterxml.jackson.core.type.TypeReference;

import ch.myelexis.server.client.ApiClient;
import ch.myelexis.server.client.ApiException;
import ch.myelexis.server.client.BaseApi;
import ch.myelexis.server.client.Configuration;
import ch.myelexis.server.client.Pair;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-14T13:28:11.344655+02:00[Europe/Vienna]", comments = "Generator version: 7.16.0")
public class EntityManagementApi extends BaseApi {

  public EntityManagementApi() {
    super(Configuration.getDefaultApiClient());
  }

  public EntityManagementApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Return the extinfo stored values of an entity
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @return Map&lt;String, String&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, String> getEntityExtInfo(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType) throws ApiException {
    return this.getEntityExtInfo(entityId, entityType, Collections.emptyMap());
  }


  /**
   * Return the extinfo stored values of an entity
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, String&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, String> getEntityExtInfo(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'entityId' is set
    if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling getEntityExtInfo");
    }
    
    // verify the required parameter 'entityType' is set
    if (entityType == null) {
      throw new ApiException(400, "Missing the required parameter 'entityType' when calling getEntityExtInfo");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/management/entity/{entityType}/{entityId}/extinfo"
      .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(apiClient.parameterToString(entityId)))
      .replaceAll("\\{" + "entityType" + "\\}", apiClient.escapeString(apiClient.parameterToString(entityType)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    TypeReference<Map<String, String>> localVarReturnType = new TypeReference<Map<String, String>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Remove a single key/value pair on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param key  (optional)
   * @throws ApiException if fails to make API call
   */
  public void removeEntityExtInfoKeyValue(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nullable String key) throws ApiException {
    this.removeEntityExtInfoKeyValue(entityId, entityType, key, Collections.emptyMap());
  }


  /**
   * Remove a single key/value pair on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param key  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void removeEntityExtInfoKeyValue(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nullable String key, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'entityId' is set
    if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling removeEntityExtInfoKeyValue");
    }
    
    // verify the required parameter 'entityType' is set
    if (entityType == null) {
      throw new ApiException(400, "Missing the required parameter 'entityType' when calling removeEntityExtInfoKeyValue");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/management/entity/{entityType}/{entityId}/extinfo"
      .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(apiClient.parameterToString(entityId)))
      .replaceAll("\\{" + "entityType" + "\\}", apiClient.escapeString(apiClient.parameterToString(entityType)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Set multiple key/value pairs on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param requestBody  (required)
   * @throws ApiException if fails to make API call
   */
  public void setMultipleEntityExtInfoKeyValue(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nonnull Map<String, String> requestBody) throws ApiException {
    this.setMultipleEntityExtInfoKeyValue(entityId, entityType, requestBody, Collections.emptyMap());
  }


  /**
   * Set multiple key/value pairs on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param requestBody  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void setMultipleEntityExtInfoKeyValue(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nonnull Map<String, String> requestBody, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = requestBody;
    
    // verify the required parameter 'entityId' is set
    if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling setMultipleEntityExtInfoKeyValue");
    }
    
    // verify the required parameter 'entityType' is set
    if (entityType == null) {
      throw new ApiException(400, "Missing the required parameter 'entityType' when calling setMultipleEntityExtInfoKeyValue");
    }
    
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'requestBody' when calling setMultipleEntityExtInfoKeyValue");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/management/entity/{entityType}/{entityId}/extinfo"
      .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(apiClient.parameterToString(entityId)))
      .replaceAll("\\{" + "entityType" + "\\}", apiClient.escapeString(apiClient.parameterToString(entityType)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Set a single key/value pair on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param key  (optional)
   * @param value  (optional)
   * @throws ApiException if fails to make API call
   */
  public void setSingleEntityExtInfoKeyValue(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nullable String key, @jakarta.annotation.Nullable String value) throws ApiException {
    this.setSingleEntityExtInfoKeyValue(entityId, entityType, key, value, Collections.emptyMap());
  }


  /**
   * Set a single key/value pair on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param key  (optional)
   * @param value  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void setSingleEntityExtInfoKeyValue(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nullable String key, @jakarta.annotation.Nullable String value, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'entityId' is set
    if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling setSingleEntityExtInfoKeyValue");
    }
    
    // verify the required parameter 'entityType' is set
    if (entityType == null) {
      throw new ApiException(400, "Missing the required parameter 'entityType' when calling setSingleEntityExtInfoKeyValue");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/management/entity/{entityType}/{entityId}/extinfo"
      .replaceAll("\\{" + "entityId" + "\\}", apiClient.escapeString(apiClient.parameterToString(entityId)))
      .replaceAll("\\{" + "entityType" + "\\}", apiClient.escapeString(apiClient.parameterToString(entityType)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
    localVarQueryParams.addAll(apiClient.parameterToPair("value", value));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
