/*
 * server API
 * Created from Annotated Buildtime filter with 19155 known indexed classes
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package ch.myelexis.server.api;

import ch.myelexis.server.client.ApiClient;
import ch.myelexis.server.client.ApiException;
import ch.myelexis.server.client.ApiResponse;
import ch.myelexis.server.client.Configuration;
import ch.myelexis.server.client.Pair;


import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-01T13:09:01.232453+02:00[Europe/Vienna]", comments = "Generator version: 7.16.0")
public class UserApi {
  /**
   * Utility class for extending HttpRequest.Builder functionality.
   */
  private static class HttpRequestBuilderExtensions {
    /**
     * Adds additional headers to the provided HttpRequest.Builder. Useful for adding method/endpoint specific headers.
     *
     * @param builder the HttpRequest.Builder to which headers will be added
     * @param headers a map of header names and values to add; may be null
     * @return the same HttpRequest.Builder instance with the additional headers set
     */
    static HttpRequest.Builder withAdditionalHeaders(HttpRequest.Builder builder, Map<String, String> headers) {
        if (headers != null) {
            for (Map.Entry<String, String> entry : headers.entrySet()) {
                builder.header(entry.getKey(), entry.getValue());
            }
        }
        return builder;
    }
  }
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public UserApi() {
    this(Configuration.getDefaultApiClient());
  }

  public UserApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }


  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Download file from the given response.
   *
   * @param response Response
   * @return File
   * @throws ApiException If fail to read file content from response and write to disk
   */
  public File downloadFileFromResponse(HttpResponse<InputStream> response) throws ApiException {
    try {
      File file = prepareDownloadFile(response);
      java.nio.file.Files.copy(response.body(), file.toPath(), java.nio.file.StandardCopyOption.REPLACE_EXISTING);
      return file;
    } catch (IOException e) {
      throw new ApiException(e);
    }
  }

  /**
   * <p>Prepare the file for download from the response.</p>
   *
   * @param response a {@link java.net.http.HttpResponse} object.
   * @return a {@link java.io.File} object.
   * @throws java.io.IOException if any.
   */
  private File prepareDownloadFile(HttpResponse<InputStream> response) throws IOException {
    String filename = null;
    java.util.Optional<String> contentDisposition = response.headers().firstValue("Content-Disposition");
    if (contentDisposition.isPresent() && !"".equals(contentDisposition.get())) {
      // Get filename from the Content-Disposition header.
      java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("filename=['\"]?([^'\"\\s]+)['\"]?");
      java.util.regex.Matcher matcher = pattern.matcher(contentDisposition.get());
      if (matcher.find())
        filename = matcher.group(1);
    }
    File file = null;
    if (filename != null) {
      java.nio.file.Path tempDir = java.nio.file.Files.createTempDirectory("swagger-gen-native");
      java.nio.file.Path filePath = java.nio.file.Files.createFile(tempDir.resolve(filename));
      file = filePath.toFile();
      tempDir.toFile().deleteOnExit();   // best effort cleanup
      file.deleteOnExit(); // best effort cleanup
    } else {
      file = java.nio.file.Files.createTempFile("download-", "").toFile();
      file.deleteOnExit(); // best effort cleanup
    }
    return file;
  }

  /**
   * Get Global Configuration Value By Key
   * ðŸ”“ **Roles Required:** api-access,user&lt;br&gt;
   * @param key  (optional)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getGlobalConfigurationValueByKey(@jakarta.annotation.Nullable String key) throws ApiException {
    return getGlobalConfigurationValueByKey(key, null);
  }

  /**
   * Get Global Configuration Value By Key
   * ðŸ”“ **Roles Required:** api-access,user&lt;br&gt;
   * @param key  (optional)
   * @param headers Optional headers to include in the request
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getGlobalConfigurationValueByKey(@jakarta.annotation.Nullable String key, Map<String, String> headers) throws ApiException {
    ApiResponse<String> localVarResponse = getGlobalConfigurationValueByKeyWithHttpInfo(key, headers);
    return localVarResponse.getData();
  }

  /**
   * Get Global Configuration Value By Key
   * ðŸ”“ **Roles Required:** api-access,user&lt;br&gt;
   * @param key  (optional)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> getGlobalConfigurationValueByKeyWithHttpInfo(@jakarta.annotation.Nullable String key) throws ApiException {
    return getGlobalConfigurationValueByKeyWithHttpInfo(key, null);
  }

  /**
   * Get Global Configuration Value By Key
   * ðŸ”“ **Roles Required:** api-access,user&lt;br&gt;
   * @param key  (optional)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> getGlobalConfigurationValueByKeyWithHttpInfo(@jakarta.annotation.Nullable String key, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getGlobalConfigurationValueByKeyRequestBuilder(key, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getGlobalConfigurationValueByKey", localVarResponse);
        }
         // mde added see https://github.com/OpenAPITools/openapi-generator/issues/22055
        if(204==localVarResponse.statusCode()) {
        	return new ApiResponse<String>(
                    localVarResponse.statusCode(),
                    localVarResponse.headers().map(),
                    null
            );
        }       
        // for plain text response
        if (localVarResponse.headers().map().containsKey("Content-Type") &&
                "text/plain".equalsIgnoreCase(localVarResponse.headers().map().get("Content-Type").get(0).split(";")[0].trim())) {
          java.util.Scanner s = new java.util.Scanner(localVarResponse.body()).useDelimiter("\\A");
          String responseBodyText = s.hasNext() ? s.next() : "";
          return new ApiResponse<String>(
                  localVarResponse.statusCode(),
                  localVarResponse.headers().map(),
                  responseBodyText
          );
        } else {
            throw new RuntimeException("Error! The response Content-Type is supposed to be `text/plain` but it's not: " + localVarResponse);
        }
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getGlobalConfigurationValueByKeyRequestBuilder(@jakarta.annotation.Nullable String key, Map<String, String> headers) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/user/config/global";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "key";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key", key));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "text/plain");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get User Contact Configuration Value By Key
   * ðŸ”“ **Roles Required:** api-access,user&lt;br&gt;
   * @param key  (optional)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getUserContactConfigurationValueByKey(@jakarta.annotation.Nullable String key) throws ApiException {
    return getUserContactConfigurationValueByKey(key, null);
  }

  /**
   * Get User Contact Configuration Value By Key
   * ðŸ”“ **Roles Required:** api-access,user&lt;br&gt;
   * @param key  (optional)
   * @param headers Optional headers to include in the request
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getUserContactConfigurationValueByKey(@jakarta.annotation.Nullable String key, Map<String, String> headers) throws ApiException {
    ApiResponse<String> localVarResponse = getUserContactConfigurationValueByKeyWithHttpInfo(key, headers);
    return localVarResponse.getData();
  }

  /**
   * Get User Contact Configuration Value By Key
   * ðŸ”“ **Roles Required:** api-access,user&lt;br&gt;
   * @param key  (optional)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> getUserContactConfigurationValueByKeyWithHttpInfo(@jakarta.annotation.Nullable String key) throws ApiException {
    return getUserContactConfigurationValueByKeyWithHttpInfo(key, null);
  }

  /**
   * Get User Contact Configuration Value By Key
   * ðŸ”“ **Roles Required:** api-access,user&lt;br&gt;
   * @param key  (optional)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> getUserContactConfigurationValueByKeyWithHttpInfo(@jakarta.annotation.Nullable String key, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUserContactConfigurationValueByKeyRequestBuilder(key, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUserContactConfigurationValueByKey", localVarResponse);
        }
         // mde added see https://github.com/OpenAPITools/openapi-generator/issues/22055
        if(204==localVarResponse.statusCode()) {
        	return new ApiResponse<String>(
                    localVarResponse.statusCode(),
                    localVarResponse.headers().map(),
                    null
            );
        }       
        // for plain text response
        if (localVarResponse.headers().map().containsKey("Content-Type") &&
                "text/plain".equalsIgnoreCase(localVarResponse.headers().map().get("Content-Type").get(0).split(";")[0].trim())) {
          java.util.Scanner s = new java.util.Scanner(localVarResponse.body()).useDelimiter("\\A");
          String responseBodyText = s.hasNext() ? s.next() : "";
          return new ApiResponse<String>(
                  localVarResponse.statusCode(),
                  localVarResponse.headers().map(),
                  responseBodyText
          );
        } else {
            throw new RuntimeException("Error! The response Content-Type is supposed to be `text/plain` but it's not: " + localVarResponse);
        }
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUserContactConfigurationValueByKeyRequestBuilder(@jakarta.annotation.Nullable String key, Map<String, String> headers) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/user/config/contact";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "key";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key", key));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "text/plain");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Set Global Configuration Value By Key
   * ðŸ”“ **Roles Required:** api-access,user&lt;br&gt;
   * @param body  (required)
   * @param key  (optional)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String setGlobalConfigurationValueByKey(@jakarta.annotation.Nonnull String body, @jakarta.annotation.Nullable String key) throws ApiException {
    return setGlobalConfigurationValueByKey(body, key, null);
  }

  /**
   * Set Global Configuration Value By Key
   * ðŸ”“ **Roles Required:** api-access,user&lt;br&gt;
   * @param body  (required)
   * @param key  (optional)
   * @param headers Optional headers to include in the request
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String setGlobalConfigurationValueByKey(@jakarta.annotation.Nonnull String body, @jakarta.annotation.Nullable String key, Map<String, String> headers) throws ApiException {
    ApiResponse<String> localVarResponse = setGlobalConfigurationValueByKeyWithHttpInfo(body, key, headers);
    return localVarResponse.getData();
  }

  /**
   * Set Global Configuration Value By Key
   * ðŸ”“ **Roles Required:** api-access,user&lt;br&gt;
   * @param body  (required)
   * @param key  (optional)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> setGlobalConfigurationValueByKeyWithHttpInfo(@jakarta.annotation.Nonnull String body, @jakarta.annotation.Nullable String key) throws ApiException {
    return setGlobalConfigurationValueByKeyWithHttpInfo(body, key, null);
  }

  /**
   * Set Global Configuration Value By Key
   * ðŸ”“ **Roles Required:** api-access,user&lt;br&gt;
   * @param body  (required)
   * @param key  (optional)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> setGlobalConfigurationValueByKeyWithHttpInfo(@jakarta.annotation.Nonnull String body, @jakarta.annotation.Nullable String key, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = setGlobalConfigurationValueByKeyRequestBuilder(body, key, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("setGlobalConfigurationValueByKey", localVarResponse);
        }
         // mde added see https://github.com/OpenAPITools/openapi-generator/issues/22055
        if(204==localVarResponse.statusCode()) {
        	return new ApiResponse<String>(
                    localVarResponse.statusCode(),
                    localVarResponse.headers().map(),
                    null
            );
        }       
        // for plain text response
        if (localVarResponse.headers().map().containsKey("Content-Type") &&
                "text/plain".equalsIgnoreCase(localVarResponse.headers().map().get("Content-Type").get(0).split(";")[0].trim())) {
          java.util.Scanner s = new java.util.Scanner(localVarResponse.body()).useDelimiter("\\A");
          String responseBodyText = s.hasNext() ? s.next() : "";
          return new ApiResponse<String>(
                  localVarResponse.statusCode(),
                  localVarResponse.headers().map(),
                  responseBodyText
          );
        } else {
            throw new RuntimeException("Error! The response Content-Type is supposed to be `text/plain` but it's not: " + localVarResponse);
        }
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder setGlobalConfigurationValueByKeyRequestBuilder(@jakarta.annotation.Nonnull String body, @jakarta.annotation.Nullable String key, Map<String, String> headers) throws ApiException {
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling setGlobalConfigurationValueByKey");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/user/config/global";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "key";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key", key));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "text/plain");
    localVarRequestBuilder.header("Accept", "text/plain");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(body));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
