/*
 * myElexis-Server API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package ch.myelexis.server.api;

import ch.myelexis.server.client.ApiClient;
import ch.myelexis.server.client.ApiException;
import ch.myelexis.server.client.ApiResponse;
import ch.myelexis.server.client.Configuration;
import ch.myelexis.server.client.Pair;

import ch.myelexis.server.model.User;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-06T12:40:32.737785+02:00[Europe/Vienna]", comments = "Generator version: 7.16.0")
public class ManagementApi {
  /**
   * Utility class for extending HttpRequest.Builder functionality.
   */
  private static class HttpRequestBuilderExtensions {
    /**
     * Adds additional headers to the provided HttpRequest.Builder. Useful for adding method/endpoint specific headers.
     *
     * @param builder the HttpRequest.Builder to which headers will be added
     * @param headers a map of header names and values to add; may be null
     * @return the same HttpRequest.Builder instance with the additional headers set
     */
    static HttpRequest.Builder withAdditionalHeaders(HttpRequest.Builder builder, Map<String, String> headers) {
        if (headers != null) {
            for (Map.Entry<String, String> entry : headers.entrySet()) {
                builder.header(entry.getKey(), entry.getValue());
            }
        }
        return builder;
    }
  }
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ManagementApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ManagementApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }


  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Download file from the given response.
   *
   * @param response Response
   * @return File
   * @throws ApiException If fail to read file content from response and write to disk
   */
  public File downloadFileFromResponse(HttpResponse<InputStream> response) throws ApiException {
    try {
      File file = prepareDownloadFile(response);
      java.nio.file.Files.copy(response.body(), file.toPath(), java.nio.file.StandardCopyOption.REPLACE_EXISTING);
      return file;
    } catch (IOException e) {
      throw new ApiException(e);
    }
  }

  /**
   * <p>Prepare the file for download from the response.</p>
   *
   * @param response a {@link java.net.http.HttpResponse} object.
   * @return a {@link java.io.File} object.
   * @throws java.io.IOException if any.
   */
  private File prepareDownloadFile(HttpResponse<InputStream> response) throws IOException {
    String filename = null;
    java.util.Optional<String> contentDisposition = response.headers().firstValue("Content-Disposition");
    if (contentDisposition.isPresent() && !"".equals(contentDisposition.get())) {
      // Get filename from the Content-Disposition header.
      java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("filename=['\"]?([^'\"\\s]+)['\"]?");
      java.util.regex.Matcher matcher = pattern.matcher(contentDisposition.get());
      if (matcher.find())
        filename = matcher.group(1);
    }
    File file = null;
    if (filename != null) {
      java.nio.file.Path tempDir = java.nio.file.Files.createTempDirectory("swagger-gen-native");
      java.nio.file.Path filePath = java.nio.file.Files.createFile(tempDir.resolve(filename));
      file = filePath.toFile();
      tempDir.toFile().deleteOnExit();   // best effort cleanup
      file.deleteOnExit(); // best effort cleanup
    } else {
      file = java.nio.file.Files.createTempFile("download-", "").toFile();
      file.deleteOnExit(); // best effort cleanup
    }
    return file;
  }

  /**
   * Create a new user
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Creates a new user and, if no assocatiedContactId is provided, an associated contact in the database
   * @param user  (required)
   * @throws ApiException if fails to make API call
   */
  public void createUser(@jakarta.annotation.Nonnull User user) throws ApiException {
    createUser(user, null);
  }

  /**
   * Create a new user
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Creates a new user and, if no assocatiedContactId is provided, an associated contact in the database
   * @param user  (required)
   * @param headers Optional headers to include in the request
   * @throws ApiException if fails to make API call
   */
  public void createUser(@jakarta.annotation.Nonnull User user, Map<String, String> headers) throws ApiException {
    createUserWithHttpInfo(user, headers);
  }

  /**
   * Create a new user
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Creates a new user and, if no assocatiedContactId is provided, an associated contact in the database
   * @param user  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> createUserWithHttpInfo(@jakarta.annotation.Nonnull User user) throws ApiException {
    return createUserWithHttpInfo(user, null);
  }

  /**
   * Create a new user
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Creates a new user and, if no assocatiedContactId is provided, an associated contact in the database
   * @param user  (required)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> createUserWithHttpInfo(@jakarta.annotation.Nonnull User user, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createUserRequestBuilder(user, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createUser", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createUserRequestBuilder(@jakarta.annotation.Nonnull User user, Map<String, String> headers) throws ApiException {
    // verify the required parameter 'user' is set
    if (user == null) {
      throw new ApiException(400, "Missing the required parameter 'user' when calling createUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/user";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(user);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Remove user from database
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Removes the user from the database, does not remove the associated contact
   * @param id  (required)
   * @param cascadeKeycloak Cascade delete operation to keycloak (optional, default to false)
   * @throws ApiException if fails to make API call
   */
  public void deleteUser(@jakarta.annotation.Nonnull String id, @jakarta.annotation.Nullable Boolean cascadeKeycloak) throws ApiException {
    deleteUser(id, cascadeKeycloak, null);
  }

  /**
   * Remove user from database
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Removes the user from the database, does not remove the associated contact
   * @param id  (required)
   * @param cascadeKeycloak Cascade delete operation to keycloak (optional, default to false)
   * @param headers Optional headers to include in the request
   * @throws ApiException if fails to make API call
   */
  public void deleteUser(@jakarta.annotation.Nonnull String id, @jakarta.annotation.Nullable Boolean cascadeKeycloak, Map<String, String> headers) throws ApiException {
    deleteUserWithHttpInfo(id, cascadeKeycloak, headers);
  }

  /**
   * Remove user from database
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Removes the user from the database, does not remove the associated contact
   * @param id  (required)
   * @param cascadeKeycloak Cascade delete operation to keycloak (optional, default to false)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteUserWithHttpInfo(@jakarta.annotation.Nonnull String id, @jakarta.annotation.Nullable Boolean cascadeKeycloak) throws ApiException {
    return deleteUserWithHttpInfo(id, cascadeKeycloak, null);
  }

  /**
   * Remove user from database
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Removes the user from the database, does not remove the associated contact
   * @param id  (required)
   * @param cascadeKeycloak Cascade delete operation to keycloak (optional, default to false)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteUserWithHttpInfo(@jakarta.annotation.Nonnull String id, @jakarta.annotation.Nullable Boolean cascadeKeycloak, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteUserRequestBuilder(id, cascadeKeycloak, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteUser", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteUserRequestBuilder(@jakarta.annotation.Nonnull String id, @jakarta.annotation.Nullable Boolean cascadeKeycloak, Map<String, String> headers) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/user/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "cascade-keycloak";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cascade-keycloak", cascadeKeycloak));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get Contact Configuration Entries
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param contactid  (required)
   * @return Map&lt;String, String&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, String> getContactConfigurationEntries(@jakarta.annotation.Nonnull String contactid) throws ApiException {
    return getContactConfigurationEntries(contactid, null);
  }

  /**
   * Get Contact Configuration Entries
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param contactid  (required)
   * @param headers Optional headers to include in the request
   * @return Map&lt;String, String&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, String> getContactConfigurationEntries(@jakarta.annotation.Nonnull String contactid, Map<String, String> headers) throws ApiException {
    ApiResponse<Map<String, String>> localVarResponse = getContactConfigurationEntriesWithHttpInfo(contactid, headers);
    return localVarResponse.getData();
  }

  /**
   * Get Contact Configuration Entries
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param contactid  (required)
   * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Map<String, String>> getContactConfigurationEntriesWithHttpInfo(@jakarta.annotation.Nonnull String contactid) throws ApiException {
    return getContactConfigurationEntriesWithHttpInfo(contactid, null);
  }

  /**
   * Get Contact Configuration Entries
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param contactid  (required)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Map<String, String>> getContactConfigurationEntriesWithHttpInfo(@jakarta.annotation.Nonnull String contactid, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getContactConfigurationEntriesRequestBuilder(contactid, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getContactConfigurationEntries", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Map<String, String>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        
        
        String responseBody = new String(localVarResponse.body().readAllBytes());
        Map<String, String> responseValue = responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Map<String, String>>() {});
        
        localVarResponse.body().close();

        return new ApiResponse<Map<String, String>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseValue
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getContactConfigurationEntriesRequestBuilder(@jakarta.annotation.Nonnull String contactid, Map<String, String> headers) throws ApiException {
    // verify the required parameter 'contactid' is set
    if (contactid == null) {
      throw new ApiException(400, "Missing the required parameter 'contactid' when calling getContactConfigurationEntries");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/config/contact/{contactid}"
        .replace("{contactid}", ApiClient.urlEncode(contactid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Return the extinfo stored values of an entity
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @return Map&lt;String, String&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, String> getEntityExtInfo(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType) throws ApiException {
    return getEntityExtInfo(entityId, entityType, null);
  }

  /**
   * Return the extinfo stored values of an entity
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param headers Optional headers to include in the request
   * @return Map&lt;String, String&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, String> getEntityExtInfo(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, Map<String, String> headers) throws ApiException {
    ApiResponse<Map<String, String>> localVarResponse = getEntityExtInfoWithHttpInfo(entityId, entityType, headers);
    return localVarResponse.getData();
  }

  /**
   * Return the extinfo stored values of an entity
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Map<String, String>> getEntityExtInfoWithHttpInfo(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType) throws ApiException {
    return getEntityExtInfoWithHttpInfo(entityId, entityType, null);
  }

  /**
   * Return the extinfo stored values of an entity
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Map<String, String>> getEntityExtInfoWithHttpInfo(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getEntityExtInfoRequestBuilder(entityId, entityType, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getEntityExtInfo", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Map<String, String>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        
        
        String responseBody = new String(localVarResponse.body().readAllBytes());
        Map<String, String> responseValue = responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Map<String, String>>() {});
        
        localVarResponse.body().close();

        return new ApiResponse<Map<String, String>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseValue
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getEntityExtInfoRequestBuilder(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, Map<String, String> headers) throws ApiException {
    // verify the required parameter 'entityId' is set
    if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling getEntityExtInfo");
    }
    // verify the required parameter 'entityType' is set
    if (entityType == null) {
      throw new ApiException(400, "Missing the required parameter 'entityType' when calling getEntityExtInfo");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/entity/{entityType}/{entityId}/extinfo"
        .replace("{entityId}", ApiClient.urlEncode(entityId.toString()))
        .replace("{entityType}", ApiClient.urlEncode(entityType.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Return the global configuration tree
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param format The format of the response, json (key, values) or json-tree (defaults to json) (optional, default to json)
   * @throws ApiException if fails to make API call
   */
  public void getGlobalConfiguration(@jakarta.annotation.Nullable String format) throws ApiException {
    getGlobalConfiguration(format, null);
  }

  /**
   * Return the global configuration tree
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param format The format of the response, json (key, values) or json-tree (defaults to json) (optional, default to json)
   * @param headers Optional headers to include in the request
   * @throws ApiException if fails to make API call
   */
  public void getGlobalConfiguration(@jakarta.annotation.Nullable String format, Map<String, String> headers) throws ApiException {
    getGlobalConfigurationWithHttpInfo(format, headers);
  }

  /**
   * Return the global configuration tree
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param format The format of the response, json (key, values) or json-tree (defaults to json) (optional, default to json)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> getGlobalConfigurationWithHttpInfo(@jakarta.annotation.Nullable String format) throws ApiException {
    return getGlobalConfigurationWithHttpInfo(format, null);
  }

  /**
   * Return the global configuration tree
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param format The format of the response, json (key, values) or json-tree (defaults to json) (optional, default to json)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> getGlobalConfigurationWithHttpInfo(@jakarta.annotation.Nullable String format, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getGlobalConfigurationRequestBuilder(format, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getGlobalConfiguration", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getGlobalConfigurationRequestBuilder(@jakarta.annotation.Nullable String format, Map<String, String> headers) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/config/global";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "format";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("format", format));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get User
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param id  (required)
   * @return User
   * @throws ApiException if fails to make API call
   */
  public User getUser(@jakarta.annotation.Nonnull String id) throws ApiException {
    return getUser(id, null);
  }

  /**
   * Get User
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param id  (required)
   * @param headers Optional headers to include in the request
   * @return User
   * @throws ApiException if fails to make API call
   */
  public User getUser(@jakarta.annotation.Nonnull String id, Map<String, String> headers) throws ApiException {
    ApiResponse<User> localVarResponse = getUserWithHttpInfo(id, headers);
    return localVarResponse.getData();
  }

  /**
   * Get User
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param id  (required)
   * @return ApiResponse&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<User> getUserWithHttpInfo(@jakarta.annotation.Nonnull String id) throws ApiException {
    return getUserWithHttpInfo(id, null);
  }

  /**
   * Get User
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param id  (required)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<User> getUserWithHttpInfo(@jakarta.annotation.Nonnull String id, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUserRequestBuilder(id, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUser", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<User>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        
        
        String responseBody = new String(localVarResponse.body().readAllBytes());
        User responseValue = responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<User>() {});
        
        localVarResponse.body().close();

        return new ApiResponse<User>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseValue
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUserRequestBuilder(@jakarta.annotation.Nonnull String id, Map<String, String> headers) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/user/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Return the configuration tree of a user contact. If no param provided, returns a list of all user-contact-ids with configuration values.
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param userContactId The id of a users associated-contact (optional)
   * @param userId The id of a user (its associated contact will be used). Setting this will override &#x60;user-contact-id&#x60; (optional)
   * @throws ApiException if fails to make API call
   */
  public void getUserContactConfigurationAsTree(@jakarta.annotation.Nullable String userContactId, @jakarta.annotation.Nullable String userId) throws ApiException {
    getUserContactConfigurationAsTree(userContactId, userId, null);
  }

  /**
   * Return the configuration tree of a user contact. If no param provided, returns a list of all user-contact-ids with configuration values.
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param userContactId The id of a users associated-contact (optional)
   * @param userId The id of a user (its associated contact will be used). Setting this will override &#x60;user-contact-id&#x60; (optional)
   * @param headers Optional headers to include in the request
   * @throws ApiException if fails to make API call
   */
  public void getUserContactConfigurationAsTree(@jakarta.annotation.Nullable String userContactId, @jakarta.annotation.Nullable String userId, Map<String, String> headers) throws ApiException {
    getUserContactConfigurationAsTreeWithHttpInfo(userContactId, userId, headers);
  }

  /**
   * Return the configuration tree of a user contact. If no param provided, returns a list of all user-contact-ids with configuration values.
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param userContactId The id of a users associated-contact (optional)
   * @param userId The id of a user (its associated contact will be used). Setting this will override &#x60;user-contact-id&#x60; (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> getUserContactConfigurationAsTreeWithHttpInfo(@jakarta.annotation.Nullable String userContactId, @jakarta.annotation.Nullable String userId) throws ApiException {
    return getUserContactConfigurationAsTreeWithHttpInfo(userContactId, userId, null);
  }

  /**
   * Return the configuration tree of a user contact. If no param provided, returns a list of all user-contact-ids with configuration values.
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param userContactId The id of a users associated-contact (optional)
   * @param userId The id of a user (its associated contact will be used). Setting this will override &#x60;user-contact-id&#x60; (optional)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> getUserContactConfigurationAsTreeWithHttpInfo(@jakarta.annotation.Nullable String userContactId, @jakarta.annotation.Nullable String userId, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUserContactConfigurationAsTreeRequestBuilder(userContactId, userId, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUserContactConfigurationAsTree", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUserContactConfigurationAsTreeRequestBuilder(@jakarta.annotation.Nullable String userContactId, @jakarta.annotation.Nullable String userId, Map<String, String> headers) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/config/usercontact";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "user-contact-id";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user-contact-id", userContactId));
    localVarQueryParameterBaseName = "user-id";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user-id", userId));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List all users
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Lists all users in the system.
   * @return List&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public List<User> getUsers() throws ApiException {
    return getUsers(null);
  }

  /**
   * List all users
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Lists all users in the system.
   * @param headers Optional headers to include in the request
   * @return List&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public List<User> getUsers(Map<String, String> headers) throws ApiException {
    ApiResponse<List<User>> localVarResponse = getUsersWithHttpInfo(headers);
    return localVarResponse.getData();
  }

  /**
   * List all users
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Lists all users in the system.
   * @return ApiResponse&lt;List&lt;User&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<User>> getUsersWithHttpInfo() throws ApiException {
    return getUsersWithHttpInfo(null);
  }

  /**
   * List all users
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Lists all users in the system.
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;List&lt;User&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<User>> getUsersWithHttpInfo(Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUsersRequestBuilder(headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUsers", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<User>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        
        
        String responseBody = new String(localVarResponse.body().readAllBytes());
        List<User> responseValue = responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<User>>() {});
        
        localVarResponse.body().close();

        return new ApiResponse<List<User>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseValue
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUsersRequestBuilder(Map<String, String> headers) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/user";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List available groups
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;The user groups a user may be a member of.
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> listAvailableGroups() throws ApiException {
    return listAvailableGroups(null);
  }

  /**
   * List available groups
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;The user groups a user may be a member of.
   * @param headers Optional headers to include in the request
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> listAvailableGroups(Map<String, String> headers) throws ApiException {
    ApiResponse<List<String>> localVarResponse = listAvailableGroupsWithHttpInfo(headers);
    return localVarResponse.getData();
  }

  /**
   * List available groups
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;The user groups a user may be a member of.
   * @return ApiResponse&lt;List&lt;String&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<String>> listAvailableGroupsWithHttpInfo() throws ApiException {
    return listAvailableGroupsWithHttpInfo(null);
  }

  /**
   * List available groups
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;The user groups a user may be a member of.
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;List&lt;String&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<String>> listAvailableGroupsWithHttpInfo(Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAvailableGroupsRequestBuilder(headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAvailableGroups", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<String>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        
        
        String responseBody = new String(localVarResponse.body().readAllBytes());
        List<String> responseValue = responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<String>>() {});
        
        localVarResponse.body().close();

        return new ApiResponse<List<String>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseValue
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAvailableGroupsRequestBuilder(Map<String, String> headers) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/user/list-available-groups";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List available roles
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;The access roles assignable to a user.
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> listAvailableRoles() throws ApiException {
    return listAvailableRoles(null);
  }

  /**
   * List available roles
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;The access roles assignable to a user.
   * @param headers Optional headers to include in the request
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> listAvailableRoles(Map<String, String> headers) throws ApiException {
    ApiResponse<List<String>> localVarResponse = listAvailableRolesWithHttpInfo(headers);
    return localVarResponse.getData();
  }

  /**
   * List available roles
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;The access roles assignable to a user.
   * @return ApiResponse&lt;List&lt;String&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<String>> listAvailableRolesWithHttpInfo() throws ApiException {
    return listAvailableRolesWithHttpInfo(null);
  }

  /**
   * List available roles
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;The access roles assignable to a user.
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;List&lt;String&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<String>> listAvailableRolesWithHttpInfo(Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAvailableRolesRequestBuilder(headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAvailableRoles", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<List<String>>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        
        
        String responseBody = new String(localVarResponse.body().readAllBytes());
        List<String> responseValue = responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<String>>() {});
        
        localVarResponse.body().close();

        return new ApiResponse<List<String>>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseValue
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAvailableRolesRequestBuilder(Map<String, String> headers) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/user/list-available-roles";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Remove a single key/value pair on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param key  (optional)
   * @throws ApiException if fails to make API call
   */
  public void removeEntityExtInfoKeyValue(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nullable String key) throws ApiException {
    removeEntityExtInfoKeyValue(entityId, entityType, key, null);
  }

  /**
   * Remove a single key/value pair on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param key  (optional)
   * @param headers Optional headers to include in the request
   * @throws ApiException if fails to make API call
   */
  public void removeEntityExtInfoKeyValue(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nullable String key, Map<String, String> headers) throws ApiException {
    removeEntityExtInfoKeyValueWithHttpInfo(entityId, entityType, key, headers);
  }

  /**
   * Remove a single key/value pair on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param key  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeEntityExtInfoKeyValueWithHttpInfo(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nullable String key) throws ApiException {
    return removeEntityExtInfoKeyValueWithHttpInfo(entityId, entityType, key, null);
  }

  /**
   * Remove a single key/value pair on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param key  (optional)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeEntityExtInfoKeyValueWithHttpInfo(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nullable String key, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeEntityExtInfoKeyValueRequestBuilder(entityId, entityType, key, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeEntityExtInfoKeyValue", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeEntityExtInfoKeyValueRequestBuilder(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nullable String key, Map<String, String> headers) throws ApiException {
    // verify the required parameter 'entityId' is set
    if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling removeEntityExtInfoKeyValue");
    }
    // verify the required parameter 'entityType' is set
    if (entityType == null) {
      throw new ApiException(400, "Missing the required parameter 'entityType' when calling removeEntityExtInfoKeyValue");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/entity/{entityType}/{entityId}/extinfo"
        .replace("{entityId}", ApiClient.urlEncode(entityId.toString()))
        .replace("{entityType}", ApiClient.urlEncode(entityType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "key";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key", key));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update contact configuration
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param contactid  (required)
   * @param requestBody  (required)
   * @throws ApiException if fails to make API call
   */
  public void setContactConfiguration(@jakarta.annotation.Nonnull String contactid, @jakarta.annotation.Nonnull Map<String, String> requestBody) throws ApiException {
    setContactConfiguration(contactid, requestBody, null);
  }

  /**
   * Update contact configuration
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param contactid  (required)
   * @param requestBody  (required)
   * @param headers Optional headers to include in the request
   * @throws ApiException if fails to make API call
   */
  public void setContactConfiguration(@jakarta.annotation.Nonnull String contactid, @jakarta.annotation.Nonnull Map<String, String> requestBody, Map<String, String> headers) throws ApiException {
    setContactConfigurationWithHttpInfo(contactid, requestBody, headers);
  }

  /**
   * Update contact configuration
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param contactid  (required)
   * @param requestBody  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> setContactConfigurationWithHttpInfo(@jakarta.annotation.Nonnull String contactid, @jakarta.annotation.Nonnull Map<String, String> requestBody) throws ApiException {
    return setContactConfigurationWithHttpInfo(contactid, requestBody, null);
  }

  /**
   * Update contact configuration
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param contactid  (required)
   * @param requestBody  (required)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> setContactConfigurationWithHttpInfo(@jakarta.annotation.Nonnull String contactid, @jakarta.annotation.Nonnull Map<String, String> requestBody, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = setContactConfigurationRequestBuilder(contactid, requestBody, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("setContactConfiguration", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder setContactConfigurationRequestBuilder(@jakarta.annotation.Nonnull String contactid, @jakarta.annotation.Nonnull Map<String, String> requestBody, Map<String, String> headers) throws ApiException {
    // verify the required parameter 'contactid' is set
    if (contactid == null) {
      throw new ApiException(400, "Missing the required parameter 'contactid' when calling setContactConfiguration");
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'requestBody' when calling setContactConfiguration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/config/contact/{contactid}"
        .replace("{contactid}", ApiClient.urlEncode(contactid.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Set multiple key/value pairs on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param requestBody  (required)
   * @throws ApiException if fails to make API call
   */
  public void setMultipleEntityExtInfoKeyValue(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nonnull Map<String, String> requestBody) throws ApiException {
    setMultipleEntityExtInfoKeyValue(entityId, entityType, requestBody, null);
  }

  /**
   * Set multiple key/value pairs on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param requestBody  (required)
   * @param headers Optional headers to include in the request
   * @throws ApiException if fails to make API call
   */
  public void setMultipleEntityExtInfoKeyValue(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nonnull Map<String, String> requestBody, Map<String, String> headers) throws ApiException {
    setMultipleEntityExtInfoKeyValueWithHttpInfo(entityId, entityType, requestBody, headers);
  }

  /**
   * Set multiple key/value pairs on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param requestBody  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> setMultipleEntityExtInfoKeyValueWithHttpInfo(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nonnull Map<String, String> requestBody) throws ApiException {
    return setMultipleEntityExtInfoKeyValueWithHttpInfo(entityId, entityType, requestBody, null);
  }

  /**
   * Set multiple key/value pairs on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param requestBody  (required)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> setMultipleEntityExtInfoKeyValueWithHttpInfo(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nonnull Map<String, String> requestBody, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = setMultipleEntityExtInfoKeyValueRequestBuilder(entityId, entityType, requestBody, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("setMultipleEntityExtInfoKeyValue", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder setMultipleEntityExtInfoKeyValueRequestBuilder(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nonnull Map<String, String> requestBody, Map<String, String> headers) throws ApiException {
    // verify the required parameter 'entityId' is set
    if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling setMultipleEntityExtInfoKeyValue");
    }
    // verify the required parameter 'entityType' is set
    if (entityType == null) {
      throw new ApiException(400, "Missing the required parameter 'entityType' when calling setMultipleEntityExtInfoKeyValue");
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'requestBody' when calling setMultipleEntityExtInfoKeyValue");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/entity/{entityType}/{entityId}/extinfo"
        .replace("{entityId}", ApiClient.urlEncode(entityId.toString()))
        .replace("{entityType}", ApiClient.urlEncode(entityType.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Set a single key/value pair on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param key  (optional)
   * @param value  (optional)
   * @throws ApiException if fails to make API call
   */
  public void setSingleEntityExtInfoKeyValue(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nullable String key, @jakarta.annotation.Nullable String value) throws ApiException {
    setSingleEntityExtInfoKeyValue(entityId, entityType, key, value, null);
  }

  /**
   * Set a single key/value pair on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param key  (optional)
   * @param value  (optional)
   * @param headers Optional headers to include in the request
   * @throws ApiException if fails to make API call
   */
  public void setSingleEntityExtInfoKeyValue(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nullable String key, @jakarta.annotation.Nullable String value, Map<String, String> headers) throws ApiException {
    setSingleEntityExtInfoKeyValueWithHttpInfo(entityId, entityType, key, value, headers);
  }

  /**
   * Set a single key/value pair on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param key  (optional)
   * @param value  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> setSingleEntityExtInfoKeyValueWithHttpInfo(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nullable String key, @jakarta.annotation.Nullable String value) throws ApiException {
    return setSingleEntityExtInfoKeyValueWithHttpInfo(entityId, entityType, key, value, null);
  }

  /**
   * Set a single key/value pair on an entities extinfo
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param entityId  (required)
   * @param entityType  (required)
   * @param key  (optional)
   * @param value  (optional)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> setSingleEntityExtInfoKeyValueWithHttpInfo(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nullable String key, @jakarta.annotation.Nullable String value, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = setSingleEntityExtInfoKeyValueRequestBuilder(entityId, entityType, key, value, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("setSingleEntityExtInfoKeyValue", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder setSingleEntityExtInfoKeyValueRequestBuilder(@jakarta.annotation.Nonnull String entityId, @jakarta.annotation.Nonnull String entityType, @jakarta.annotation.Nullable String key, @jakarta.annotation.Nullable String value, Map<String, String> headers) throws ApiException {
    // verify the required parameter 'entityId' is set
    if (entityId == null) {
      throw new ApiException(400, "Missing the required parameter 'entityId' when calling setSingleEntityExtInfoKeyValue");
    }
    // verify the required parameter 'entityType' is set
    if (entityType == null) {
      throw new ApiException(400, "Missing the required parameter 'entityType' when calling setSingleEntityExtInfoKeyValue");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/entity/{entityType}/{entityId}/extinfo"
        .replace("{entityId}", ApiClient.urlEncode(entityId.toString()))
        .replace("{entityType}", ApiClient.urlEncode(entityType.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "key";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("key", key));
    localVarQueryParameterBaseName = "value";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("value", value));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update Global Config By Json
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param body A (partial) config json. Keys with value &#x60;null&#x60; will be deleted. Add &#x60;\&quot;dry-run\&quot;: true&#x60; to perform a dry-run. (required)
   * @throws ApiException if fails to make API call
   */
  public void updateGlobalConfigByJson(@jakarta.annotation.Nonnull String body) throws ApiException {
    updateGlobalConfigByJson(body, null);
  }

  /**
   * Update Global Config By Json
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param body A (partial) config json. Keys with value &#x60;null&#x60; will be deleted. Add &#x60;\&quot;dry-run\&quot;: true&#x60; to perform a dry-run. (required)
   * @param headers Optional headers to include in the request
   * @throws ApiException if fails to make API call
   */
  public void updateGlobalConfigByJson(@jakarta.annotation.Nonnull String body, Map<String, String> headers) throws ApiException {
    updateGlobalConfigByJsonWithHttpInfo(body, headers);
  }

  /**
   * Update Global Config By Json
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param body A (partial) config json. Keys with value &#x60;null&#x60; will be deleted. Add &#x60;\&quot;dry-run\&quot;: true&#x60; to perform a dry-run. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateGlobalConfigByJsonWithHttpInfo(@jakarta.annotation.Nonnull String body) throws ApiException {
    return updateGlobalConfigByJsonWithHttpInfo(body, null);
  }

  /**
   * Update Global Config By Json
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param body A (partial) config json. Keys with value &#x60;null&#x60; will be deleted. Add &#x60;\&quot;dry-run\&quot;: true&#x60; to perform a dry-run. (required)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateGlobalConfigByJsonWithHttpInfo(@jakarta.annotation.Nonnull String body, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateGlobalConfigByJsonRequestBuilder(body, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateGlobalConfigByJson", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateGlobalConfigByJsonRequestBuilder(@jakarta.annotation.Nonnull String body, Map<String, String> headers) throws ApiException {
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling updateGlobalConfigByJson");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/config/global";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofString(body));
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update an existing user
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Requires the associatedContactId to be set. Updates the user and the associated contact.
   * @param id  (required)
   * @param user  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateUser(@jakarta.annotation.Nonnull String id, @jakarta.annotation.Nonnull User user) throws ApiException {
    updateUser(id, user, null);
  }

  /**
   * Update an existing user
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Requires the associatedContactId to be set. Updates the user and the associated contact.
   * @param id  (required)
   * @param user  (required)
   * @param headers Optional headers to include in the request
   * @throws ApiException if fails to make API call
   */
  public void updateUser(@jakarta.annotation.Nonnull String id, @jakarta.annotation.Nonnull User user, Map<String, String> headers) throws ApiException {
    updateUserWithHttpInfo(id, user, headers);
  }

  /**
   * Update an existing user
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Requires the associatedContactId to be set. Updates the user and the associated contact.
   * @param id  (required)
   * @param user  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateUserWithHttpInfo(@jakarta.annotation.Nonnull String id, @jakarta.annotation.Nonnull User user) throws ApiException {
    return updateUserWithHttpInfo(id, user, null);
  }

  /**
   * Update an existing user
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Requires the associatedContactId to be set. Updates the user and the associated contact.
   * @param id  (required)
   * @param user  (required)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> updateUserWithHttpInfo(@jakarta.annotation.Nonnull String id, @jakarta.annotation.Nonnull User user, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateUserRequestBuilder(id, user, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateUser", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateUserRequestBuilder(@jakarta.annotation.Nonnull String id, @jakarta.annotation.Nonnull User user, Map<String, String> headers) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateUser");
    }
    // verify the required parameter 'user' is set
    if (user == null) {
      throw new ApiException(400, "Missing the required parameter 'user' when calling updateUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/user/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(user);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Upstream keycloak sync user data
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Synchronizes the user to the Keycloak server. Creates the user if it does not exist. Updates the user if it exists.
   * @param username  (optional)
   * @throws ApiException if fails to make API call
   */
  public void upstreamSyncToKeycloak(@jakarta.annotation.Nullable String username) throws ApiException {
    upstreamSyncToKeycloak(username, null);
  }

  /**
   * Upstream keycloak sync user data
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Synchronizes the user to the Keycloak server. Creates the user if it does not exist. Updates the user if it exists.
   * @param username  (optional)
   * @param headers Optional headers to include in the request
   * @throws ApiException if fails to make API call
   */
  public void upstreamSyncToKeycloak(@jakarta.annotation.Nullable String username, Map<String, String> headers) throws ApiException {
    upstreamSyncToKeycloakWithHttpInfo(username, headers);
  }

  /**
   * Upstream keycloak sync user data
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Synchronizes the user to the Keycloak server. Creates the user if it does not exist. Updates the user if it exists.
   * @param username  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> upstreamSyncToKeycloakWithHttpInfo(@jakarta.annotation.Nullable String username) throws ApiException {
    return upstreamSyncToKeycloakWithHttpInfo(username, null);
  }

  /**
   * Upstream keycloak sync user data
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;Synchronizes the user to the Keycloak server. Creates the user if it does not exist. Updates the user if it exists.
   * @param username  (optional)
   * @param headers Optional headers to include in the request
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> upstreamSyncToKeycloakWithHttpInfo(@jakarta.annotation.Nullable String username, Map<String, String> headers) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = upstreamSyncToKeycloakRequestBuilder(username, headers);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("upstreamSyncToKeycloak", localVarResponse);
        }
        return new ApiResponse<>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
          // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder upstreamSyncToKeycloakRequestBuilder(@jakarta.annotation.Nullable String username, Map<String, String> headers) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/management/user/sync-to-keycloak";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "username";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    // Add custom headers if provided
    localVarRequestBuilder = HttpRequestBuilderExtensions.withAdditionalHeaders(localVarRequestBuilder, headers);
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
