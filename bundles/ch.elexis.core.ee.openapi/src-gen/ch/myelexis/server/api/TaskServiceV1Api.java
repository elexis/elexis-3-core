/*
 * myElexis-Server API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package ch.myelexis.server.api;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

import com.fasterxml.jackson.core.type.TypeReference;

import ch.myelexis.server.client.ApiClient;
import ch.myelexis.server.client.ApiException;
import ch.myelexis.server.client.BaseApi;
import ch.myelexis.server.client.Configuration;
import ch.myelexis.server.client.Pair;
import ch.myelexis.server.model.IdentifiedRunnable;
import ch.myelexis.server.model.Task;
import ch.myelexis.server.model.TaskResult;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-14T13:28:11.344655+02:00[Europe/Vienna]", comments = "Generator version: 7.16.0")
public class TaskServiceV1Api extends BaseApi {

  public TaskServiceV1Api() {
    super(Configuration.getDefaultApiClient());
  }

  public TaskServiceV1Api(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Activate and possibly incur task
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @throws ApiException if fails to make API call
   */
  public void activateTask(@jakarta.annotation.Nonnull String id) throws ApiException {
    this.activateTask(id, Collections.emptyMap());
  }


  /**
   * Activate and possibly incur task
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void activateTask(@jakarta.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling activateTask");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/services/task/{id}/$activate"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Create a new task
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param task  (required)
   * @return Task
   * @throws ApiException if fails to make API call
   */
  public Task createTask(@jakarta.annotation.Nonnull Task task) throws ApiException {
    return this.createTask(task, Collections.emptyMap());
  }


  /**
   * Create a new task
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param task  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Task
   * @throws ApiException if fails to make API call
   */
  public Task createTask(@jakarta.annotation.Nonnull Task task, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = task;
    
    // verify the required parameter 'task' is set
    if (task == null) {
      throw new ApiException(400, "Missing the required parameter 'task' when calling createTask");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/services/task";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    TypeReference<Task> localVarReturnType = new TypeReference<Task>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Deactivate task
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @throws ApiException if fails to make API call
   */
  public void deactivateTask(@jakarta.annotation.Nonnull String id) throws ApiException {
    this.deactivateTask(id, Collections.emptyMap());
  }


  /**
   * Deactivate task
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deactivateTask(@jakarta.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deactivateTask");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/services/task/{id}/$deactivate"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete task
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteTask(@jakarta.annotation.Nonnull String id) throws ApiException {
    this.deleteTask(id, Collections.emptyMap());
  }


  /**
   * Delete task
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteTask(@jakarta.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteTask");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/services/task/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Find all current and past executions of a runnable
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param runnableId  (required)
   * @return List&lt;TaskResult&gt;
   * @throws ApiException if fails to make API call
   */
  public List<TaskResult> findRunnableExecutions(@jakarta.annotation.Nonnull String runnableId) throws ApiException {
    return this.findRunnableExecutions(runnableId, Collections.emptyMap());
  }


  /**
   * Find all current and past executions of a runnable
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param runnableId  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;TaskResult&gt;
   * @throws ApiException if fails to make API call
   */
  public List<TaskResult> findRunnableExecutions(@jakarta.annotation.Nonnull String runnableId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'runnableId' is set
    if (runnableId == null) {
      throw new ApiException(400, "Missing the required parameter 'runnableId' when calling findRunnableExecutions");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/services/runnable/{runnableId}/executions"
      .replaceAll("\\{" + "runnableId" + "\\}", apiClient.escapeString(apiClient.parameterToString(runnableId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    TypeReference<List<TaskResult>> localVarReturnType = new TypeReference<List<TaskResult>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get task and its state
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @return Task
   * @throws ApiException if fails to make API call
   */
  public Task findTask(@jakarta.annotation.Nonnull String id) throws ApiException {
    return this.findTask(id, Collections.emptyMap());
  }


  /**
   * Get task and its state
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Task
   * @throws ApiException if fails to make API call
   */
  public Task findTask(@jakarta.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling findTask");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/services/task/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    TypeReference<Task> localVarReturnType = new TypeReference<Task>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all task executions ordered by create time descending (limit 25)
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @return List&lt;TaskResult&gt;
   * @throws ApiException if fails to make API call
   */
  public List<TaskResult> findTaskExecutions(@jakarta.annotation.Nonnull String id) throws ApiException {
    return this.findTaskExecutions(id, Collections.emptyMap());
  }


  /**
   * Get all task executions ordered by create time descending (limit 25)
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;TaskResult&gt;
   * @throws ApiException if fails to make API call
   */
  public List<TaskResult> findTaskExecutions(@jakarta.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling findTaskExecutions");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/services/task/{id}/executions"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    TypeReference<List<TaskResult>> localVarReturnType = new TypeReference<List<TaskResult>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List tasks
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param system  (optional, default to false)
   * @return List&lt;Task&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Task> findTasks(@jakarta.annotation.Nullable Boolean system) throws ApiException {
    return this.findTasks(system, Collections.emptyMap());
  }


  /**
   * List tasks
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param system  (optional, default to false)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Task&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Task> findTasks(@jakarta.annotation.Nullable Boolean system, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/services/task";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("system", system));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    TypeReference<List<Task>> localVarReturnType = new TypeReference<List<Task>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List available runnables
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @return List&lt;IdentifiedRunnable&gt;
   * @throws ApiException if fails to make API call
   */
  public List<IdentifiedRunnable> listRunnables() throws ApiException {
    return this.listRunnables(Collections.emptyMap());
  }


  /**
   * List available runnables
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;IdentifiedRunnable&gt;
   * @throws ApiException if fails to make API call
   */
  public List<IdentifiedRunnable> listRunnables(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/services/runnable";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    TypeReference<List<IdentifiedRunnable>> localVarReturnType = new TypeReference<List<IdentifiedRunnable>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Refreshes the info on this task, and acts on it
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @throws ApiException if fails to make API call
   */
  public void refreshTask(@jakarta.annotation.Nonnull String id) throws ApiException {
    this.refreshTask(id, Collections.emptyMap());
  }


  /**
   * Refreshes the info on this task, and acts on it
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void refreshTask(@jakarta.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling refreshTask");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/services/task/{id}/$refresh"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Trigger asynchronous execution of a runnable
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param runnableId  (required)
   * @param requestBody  (required)
   * @return Task
   * @throws ApiException if fails to make API call
   */
  public Task triggerRunnable(@jakarta.annotation.Nonnull String runnableId, @jakarta.annotation.Nonnull Map<String, String> requestBody) throws ApiException {
    return this.triggerRunnable(runnableId, requestBody, Collections.emptyMap());
  }


  /**
   * Trigger asynchronous execution of a runnable
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param runnableId  (required)
   * @param requestBody  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Task
   * @throws ApiException if fails to make API call
   */
  public Task triggerRunnable(@jakarta.annotation.Nonnull String runnableId, @jakarta.annotation.Nonnull Map<String, String> requestBody, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = requestBody;
    
    // verify the required parameter 'runnableId' is set
    if (runnableId == null) {
      throw new ApiException(400, "Missing the required parameter 'runnableId' when calling triggerRunnable");
    }
    
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'requestBody' when calling triggerRunnable");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/services/runnable/{runnableId}/$trigger"
      .replaceAll("\\{" + "runnableId" + "\\}", apiClient.escapeString(apiClient.parameterToString(runnableId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    TypeReference<Task> localVarReturnType = new TypeReference<Task>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Trigger synchronous execution of a runnable by its id
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param runnableId  (required)
   * @param requestBody  (required)
   * @return TaskResult
   * @throws ApiException if fails to make API call
   */
  public TaskResult triggerRunnableSync(@jakarta.annotation.Nonnull String runnableId, @jakarta.annotation.Nonnull Map<String, String> requestBody) throws ApiException {
    return this.triggerRunnableSync(runnableId, requestBody, Collections.emptyMap());
  }


  /**
   * Trigger synchronous execution of a runnable by its id
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param runnableId  (required)
   * @param requestBody  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return TaskResult
   * @throws ApiException if fails to make API call
   */
  public TaskResult triggerRunnableSync(@jakarta.annotation.Nonnull String runnableId, @jakarta.annotation.Nonnull Map<String, String> requestBody, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = requestBody;
    
    // verify the required parameter 'runnableId' is set
    if (runnableId == null) {
      throw new ApiException(400, "Missing the required parameter 'runnableId' when calling triggerRunnableSync");
    }
    
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'requestBody' when calling triggerRunnableSync");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/services/runnable/{runnableId}/$trigger-sync"
      .replaceAll("\\{" + "runnableId" + "\\}", apiClient.escapeString(apiClient.parameterToString(runnableId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    TypeReference<TaskResult> localVarReturnType = new TypeReference<TaskResult>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Trigger task
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @return TaskResult
   * @throws ApiException if fails to make API call
   */
  public TaskResult triggerTask(@jakarta.annotation.Nonnull String id) throws ApiException {
    return this.triggerTask(id, Collections.emptyMap());
  }


  /**
   * Trigger task
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return TaskResult
   * @throws ApiException if fails to make API call
   */
  public TaskResult triggerTask(@jakarta.annotation.Nonnull String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling triggerTask");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/services/task/{id}/$trigger"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    TypeReference<TaskResult> localVarReturnType = new TypeReference<TaskResult>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update task
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @param task  (required)
   * @return Task
   * @throws ApiException if fails to make API call
   */
  public Task updateTask(@jakarta.annotation.Nonnull String id, @jakarta.annotation.Nonnull Task task) throws ApiException {
    return this.updateTask(id, task, Collections.emptyMap());
  }


  /**
   * Update task
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access&lt;br&gt;
   * @param id  (required)
   * @param task  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Task
   * @throws ApiException if fails to make API call
   */
  public Task updateTask(@jakarta.annotation.Nonnull String id, @jakarta.annotation.Nonnull Task task, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = task;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateTask");
    }
    
    // verify the required parameter 'task' is set
    if (task == null) {
      throw new ApiException(400, "Missing the required parameter 'task' when calling updateTask");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/services/task/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(apiClient.parameterToString(id)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    TypeReference<Task> localVarReturnType = new TypeReference<Task>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
