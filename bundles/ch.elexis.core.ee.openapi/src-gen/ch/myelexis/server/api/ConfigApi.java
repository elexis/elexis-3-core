/*
 * myElexis-Server API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package ch.myelexis.server.api;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

import com.fasterxml.jackson.core.type.TypeReference;

import ch.myelexis.server.client.ApiClient;
import ch.myelexis.server.client.ApiException;
import ch.myelexis.server.client.BaseApi;
import ch.myelexis.server.client.Configuration;
import ch.myelexis.server.client.Pair;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-14T13:28:11.344655+02:00[Europe/Vienna]", comments = "Generator version: 7.16.0")
public class ConfigApi extends BaseApi {

  public ConfigApi() {
    super(Configuration.getDefaultApiClient());
  }

  public ConfigApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Delete Global Configuration Value By Key
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,user&lt;br&gt;
   * @param key  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteGlobalConfigurationValueByKey(@jakarta.annotation.Nonnull String key) throws ApiException {
    this.deleteGlobalConfigurationValueByKey(key, Collections.emptyMap());
  }


  /**
   * Delete Global Configuration Value By Key
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,user&lt;br&gt;
   * @param key  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteGlobalConfigurationValueByKey(@jakarta.annotation.Nonnull String key, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling deleteGlobalConfigurationValueByKey");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/user/config/global";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete User Contact Configuration Entry By Key
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,user&lt;br&gt;
   * @param key  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteUserContactConfigurationEntryByKey(@jakarta.annotation.Nonnull String key) throws ApiException {
    this.deleteUserContactConfigurationEntryByKey(key, Collections.emptyMap());
  }


  /**
   * Delete User Contact Configuration Entry By Key
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,user&lt;br&gt;
   * @param key  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteUserContactConfigurationEntryByKey(@jakarta.annotation.Nonnull String key, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling deleteUserContactConfigurationEntryByKey");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/user/config/contact";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Find the direct subnode keys for a given entry branch. Programmatically limited to specific branches.
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,user&lt;br&gt;
   * @param key  (required)
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> findGlobalConfigurationDirectSubnodeKeysForGivenKey(@jakarta.annotation.Nonnull String key) throws ApiException {
    return this.findGlobalConfigurationDirectSubnodeKeysForGivenKey(key, Collections.emptyMap());
  }


  /**
   * Find the direct subnode keys for a given entry branch. Programmatically limited to specific branches.
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,user&lt;br&gt;
   * @param key  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public List<String> findGlobalConfigurationDirectSubnodeKeysForGivenKey(@jakarta.annotation.Nonnull String key, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling findGlobalConfigurationDirectSubnodeKeysForGivenKey");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/user/config/global-subnodekeys";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    TypeReference<List<String>> localVarReturnType = new TypeReference<List<String>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Contact Configuration Entries
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param contactid  (required)
   * @return Map&lt;String, String&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, String> getContactConfigurationEntries(@jakarta.annotation.Nonnull String contactid) throws ApiException {
    return this.getContactConfigurationEntries(contactid, Collections.emptyMap());
  }


  /**
   * Get Contact Configuration Entries
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param contactid  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Map&lt;String, String&gt;
   * @throws ApiException if fails to make API call
   */
  public Map<String, String> getContactConfigurationEntries(@jakarta.annotation.Nonnull String contactid, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'contactid' is set
    if (contactid == null) {
      throw new ApiException(400, "Missing the required parameter 'contactid' when calling getContactConfigurationEntries");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/management/config/contact/{contactid}"
      .replaceAll("\\{" + "contactid" + "\\}", apiClient.escapeString(apiClient.parameterToString(contactid)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    TypeReference<Map<String, String>> localVarReturnType = new TypeReference<Map<String, String>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Return the global configuration tree
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param format The format of the response, json (key, values) or json-tree (defaults to json) (optional, default to json)
   * @throws ApiException if fails to make API call
   */
  public void getGlobalConfiguration(@jakarta.annotation.Nullable String format) throws ApiException {
    this.getGlobalConfiguration(format, Collections.emptyMap());
  }


  /**
   * Return the global configuration tree
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param format The format of the response, json (key, values) or json-tree (defaults to json) (optional, default to json)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void getGlobalConfiguration(@jakarta.annotation.Nullable String format, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/management/config/global";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("format", format));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Get Global Configuration Value By Key
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,user&lt;br&gt;
   * @param key  (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getGlobalConfigurationValueByKey(@jakarta.annotation.Nonnull String key) throws ApiException {
    return this.getGlobalConfigurationValueByKey(key, Collections.emptyMap());
  }


  /**
   * Get Global Configuration Value By Key
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,user&lt;br&gt;
   * @param key  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getGlobalConfigurationValueByKey(@jakarta.annotation.Nonnull String key, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling getGlobalConfigurationValueByKey");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/user/config/global";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    TypeReference<String> localVarReturnType = new TypeReference<String>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Return the configuration tree of a user contact. If no param provided, returns a list of all user-contact-ids with configuration values.
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param userContactId The id of a users associated-contact (optional)
   * @param userId The id of a user (its associated contact will be used). Setting this will override &#x60;user-contact-id&#x60; (optional)
   * @throws ApiException if fails to make API call
   */
  public void getUserContactConfigurationAsTree(@jakarta.annotation.Nullable String userContactId, @jakarta.annotation.Nullable String userId) throws ApiException {
    this.getUserContactConfigurationAsTree(userContactId, userId, Collections.emptyMap());
  }


  /**
   * Return the configuration tree of a user contact. If no param provided, returns a list of all user-contact-ids with configuration values.
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param userContactId The id of a users associated-contact (optional)
   * @param userId The id of a user (its associated contact will be used). Setting this will override &#x60;user-contact-id&#x60; (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void getUserContactConfigurationAsTree(@jakarta.annotation.Nullable String userContactId, @jakarta.annotation.Nullable String userId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v1/management/config/usercontact";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("user-contact-id", userContactId));
    localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Get User Contact Configuration Value By Key
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,user&lt;br&gt;
   * @param key  (required)
   * @param contactId Target contact to fetch value for. Limited to self and contact user is aobo (optional)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getUserContactConfigurationValueByKey(@jakarta.annotation.Nonnull String key, @jakarta.annotation.Nullable String contactId) throws ApiException {
    return this.getUserContactConfigurationValueByKey(key, contactId, Collections.emptyMap());
  }


  /**
   * Get User Contact Configuration Value By Key
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,user&lt;br&gt;
   * @param key  (required)
   * @param contactId Target contact to fetch value for. Limited to self and contact user is aobo (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getUserContactConfigurationValueByKey(@jakarta.annotation.Nonnull String key, @jakarta.annotation.Nullable String contactId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling getUserContactConfigurationValueByKey");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/user/config/contact";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("contact-id", contactId));
    localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "text/plain"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    TypeReference<String> localVarReturnType = new TypeReference<String>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update contact configuration
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param contactid  (required)
   * @param requestBody  (required)
   * @throws ApiException if fails to make API call
   */
  public void setContactConfiguration(@jakarta.annotation.Nonnull String contactid, @jakarta.annotation.Nonnull Map<String, String> requestBody) throws ApiException {
    this.setContactConfiguration(contactid, requestBody, Collections.emptyMap());
  }


  /**
   * Update contact configuration
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param contactid  (required)
   * @param requestBody  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void setContactConfiguration(@jakarta.annotation.Nonnull String contactid, @jakarta.annotation.Nonnull Map<String, String> requestBody, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = requestBody;
    
    // verify the required parameter 'contactid' is set
    if (contactid == null) {
      throw new ApiException(400, "Missing the required parameter 'contactid' when calling setContactConfiguration");
    }
    
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'requestBody' when calling setContactConfiguration");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/management/config/contact/{contactid}"
      .replaceAll("\\{" + "contactid" + "\\}", apiClient.escapeString(apiClient.parameterToString(contactid)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Set Global Configuration Value By Key
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,user&lt;br&gt;
   * @param key  (required)
   * @param body  (required)
   * @throws ApiException if fails to make API call
   */
  public void setGlobalConfigurationValueByKey(@jakarta.annotation.Nonnull String key, @jakarta.annotation.Nonnull String body) throws ApiException {
    this.setGlobalConfigurationValueByKey(key, body, Collections.emptyMap());
  }


  /**
   * Set Global Configuration Value By Key
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,user&lt;br&gt;
   * @param key  (required)
   * @param body  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void setGlobalConfigurationValueByKey(@jakarta.annotation.Nonnull String key, @jakarta.annotation.Nonnull String body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling setGlobalConfigurationValueByKey");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling setGlobalConfigurationValueByKey");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/user/config/global";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "text/plain"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Set User Contact Configuration Value By Key
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,user&lt;br&gt;
   * @param key  (required)
   * @param body  (required)
   * @throws ApiException if fails to make API call
   */
  public void setUserContactConfigurationValueByKey(@jakarta.annotation.Nonnull String key, @jakarta.annotation.Nonnull String body) throws ApiException {
    this.setUserContactConfigurationValueByKey(key, body, Collections.emptyMap());
  }


  /**
   * Set User Contact Configuration Value By Key
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,user&lt;br&gt;
   * @param key  (required)
   * @param body  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void setUserContactConfigurationValueByKey(@jakarta.annotation.Nonnull String key, @jakarta.annotation.Nonnull String body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'key' is set
    if (key == null) {
      throw new ApiException(400, "Missing the required parameter 'key' when calling setUserContactConfigurationValueByKey");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling setUserContactConfigurationValueByKey");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/user/config/contact";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "text/plain"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update Global Config By Json
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param body A (partial) config json. Keys with value &#x60;null&#x60; will be deleted. Add &#x60;\&quot;dry-run\&quot;: true&#x60; to perform a dry-run. (required)
   * @throws ApiException if fails to make API call
   */
  public void updateGlobalConfigByJson(@jakarta.annotation.Nonnull String body) throws ApiException {
    this.updateGlobalConfigByJson(body, Collections.emptyMap());
  }


  /**
   * Update Global Config By Json
   * &lt;b&gt;Roles Required:&lt;/b&gt; api-access,ict-administrator&lt;br&gt;
   * @param body A (partial) config json. Keys with value &#x60;null&#x60; will be deleted. Add &#x60;\&quot;dry-run\&quot;: true&#x60; to perform a dry-run. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateGlobalConfigByJson(@jakarta.annotation.Nonnull String body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling updateGlobalConfigByJson");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/management/config/global";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ElexisEnvironment" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
