{toc} 

h2. Persistence Model

Represents the implementation of the business model interfaces defined in this bundle. It is represented by the following bundles.

* **ch.elexis.core.jpa** contains the actual database table definition, and logic to initialize and update the database (based on liquibase). Also contains an **ch.elexis.core.jpa.entitymanager.IElexisEntityManager** implementation for managed (ThreadLocal) JPA EntityManager access.
* **ch.elexis.core.jpa.entities** the elexis JPA persistence unit definition, **all** known entities are defined in this bundle. 
* **ch.elexis.core.jpa.datasource** provides the configured database connection (JDBC connection pool) for the JPA Implementation.

The JPA persistence is based on the following interfaces and classes. 

h3. Service Interfaces

* **ch.elexis.core.services.IModelService**, service interface for accessing the data model. Implementations should provide the service property *service.model.name* for clients to access a specific service instance.
* **ch.elexis.core.services.IStoreToStringService**, a central service for creating a String representation of a model object. The String representation can be used to load the object using this service.
* **ch.elexis.core.services.IStoreToStringContribution**, model service implementations should also implement this interface, which allows the *IStoreToStringService* to query for a string representation, or load a object by the string representation.

h3. Abstract Classes

* **ch.elexis.core.jpa.model.adapter.AbstractModelService**, service implementation for load, query and save model objects. Helps with creation of *ch.elexis.core.services.IModelService* services. Implementations are made public as OSGi services.
* **ch.elexis.core.jpa.model.adapter.AbstractModelAdapterFactory**, model factory implementation used to create new model instances. Maps the public model to the model implementation and the JPA Entity definition. It is used within the model service implementation an should not be made public.
* **ch.elexis.core.jpa.model.adapter.AbstractModelQuery**, JPA based query implementation for building complex queries on model objects. It is used within the model service implementation an should not be made public.

**Best practice is to create a separate persistence model bundle that has no UI specific dependencies.**

h3. Model and JPA Entity

The persistence bundle contains the model service implementations, and has a public API for usage of the model. It is best practice that the public API is mostly interfaces defining the model. The actual implementation should be internal. All JPA entities need to be implemented and registered (META-INF/persistence.xml) in the *ch.elexis.core.jpa.entities* bundle.

The model interfaces can be coded, or generated via an EMF model. If the model is generated, the resulting interfaces shall be plain Java without dependencies on EObject.

The benefits of using a EMF model to specify the public API are.
* model property literals can be used on queries
* model annotations can provide a mapping of property names

If a EMF model is used to specify the model, the following settings of the genmodel should be adjusted.
* **(Root Node) Model > Model Directory**, should be adjusted to the ending *src-gen* so the generated code is separated.
* **(Root Node) Model > Operation Reflection**, should be adjusted to false.
* **(Root Node) Class Defaults> Root Extends Class**, should be cleared, as we want to publish interfaces without EMF dependencies.
* **(Root Node) Class Defaults> Root Extends Interface**, should be cleared, as we want to publish interfaces without EMF dependencies.
* **(Package Node) All > Base Package**, should be adjusted so the generated packages will match the bundle name.

The actual model implementation will typically extend the *ch.elexis.core.jpa.model.adapter.AbstractIdModelAdapter* or one of its sub classes. This makes the implementation an adapter class, which adapts the JPA Entity to the model interface.

h2. Query

The **ch.elexis.core.services.IModelService** implementations provide access to queries on their model. There are different query implementations available for executing specific queries.

* **ch.elexis.core.services.IQuery** used to build queries with dynamic constraints.
* **ch.elexis.core.services.INamedQuery** used to create named queries that are defined on the entity implementation. Used for queries with static constraints.
* **ch.elexis.core.services.INativeQuery** used to create complex native queries.

h2. liquibase

You can test a liquibase DB-Update script (XML) on the command line by running somethin like

bc. liquibase --changeLogFile=db_update.xml --driver=com.mysql.jdbc.Driver \
--classpath=ch.elexis.core.p2site/target/repository/plugins/com.mysql.cj_8.0.13.jar \
--url='jdbc:mysql://192.168.0.70:33062/elexis' \
--username=elexis --password=elexisTest \
--logLevel=info update

Be aware that the path seen for include file while developing differ from those at runtime!

h3. running liquibase tests against all supported db types or newer JDB-driver plugins

It is strongly recommended to test, whether your changes will work with a H2, MySQL, MariaDB, Percona or PostgreSQL database.

Under ch.elexis.core.releng you find a Ruby script ch.elexis.core.releng/run_liquibase_tests.rb which can help you.
