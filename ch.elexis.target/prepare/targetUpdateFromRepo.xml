<project default="custom.build" name="jbosstools target platform updater">

	<property name="outputDir" value="${basedir}" />
	<!-- Instead of overwriting, can also create a new .target file in a different outputDir
		<property name="outputDir" value="${tmpDir}" /> 
	-->

	<!-- must set these commandline if not using defaults -->
	<property name="targetFile" value="multiple.target" />
	<property name="repoDir" value="${outputDir}/REPO/" />

	<!-- create a second .target file which replaces all URLs with a single unified (published) one
		(eg., for jbosstools target platform site), set these properties too -->
	<property name="unified.targetFile" value="unified.target" />
	<property name="unified.URL" value="http://download.jboss.org/jbosstools/updates/target-platform_3.3.indigo/latest/" />
	<property name="local.targetFile" value="local.target" />
	<property name="local.URL" value="file://${repoDir}" />

	<property name="tmpDir" value="${java.io.tmpdir}/targetUpdateFromRepo" />

	<target name="help">
		<echo>Must set these properties (or use defaults shown):
			
	ant -f targetUpdateFromRepo.xml -DrepoDir=${repoDir} \
		-DtargetFile=${targetFile} \
		-Dunified.targetFile=${unified.targetFile} \
		-Dunified.URL=${unified.URL} \
		-Dlocal.targetFile=${local.targetFile} \
		-Dlocal.URL=${local.URL}

To simply generate a local.target file from the multiple.target file, use:

	ant -f targetUpdateFromRepo.xml local.target</echo>
	</target>

	<target name="custom.build" depends="check.content.xml, get.content.xml, copy.content.xml, contentXml2artifactVersions.xsl, multiple.target, unified.target, local.target, cleanup" />

	<target name="check.content.xml" description="if content.jar, unpack to get content.xml">
		<condition property="content.xml.exists" value="true">
			<available file="${repoDir}/content.xml" />
		</condition>
	</target>
	<target name="get.content.xml" unless="content.xml.exists">
		<echo level="verbose">Unzip ${tmpDir}/content.xml</echo>
		<unzip src="${repoDir}/content.jar" dest="${tmpDir}" />
	</target>
	<target name="copy.content.xml" if="content.xml.exists">
		<echo level="verbose">Copy ${tmpDir}/content.xml</echo>
		<copy file="${repoDir}/content.xml" todir="${tmpDir}" />
	</target>

	<target name="contentXml2artifactVersions.xsl">
		<echo level="verbose">Generate ${tmpDir}/artifactVersions.properties</echo>
		<xslt style="contentXml2artifactVersions.xsl" in="${tmpDir}/content.xml" out="${tmpDir}/artifactVersions.properties" processor="trax" />
	</target>

	<target name="target2targetTemplate" description="run target2targetTemplate.xsl to templatize .target file">
		<property name="outputFile" value="${tmpDir}/${targetFile}.template" />
		<property name="replacement.URL" value="" />
		<echo level="verbose">Generate ${outputFile}</echo>
		<xslt style="target2targetTemplate.xsl" in="${targetFile}" out="${outputFile}" processor="trax">
			<param name="replacement.URL" expression="${replacement.URL}" />
			<!-- if replace.versions is set, will update from versions in repo; if not set, will only update URLs, not IU versions -->
			<param name="replace.versions" expression="1" />
		</xslt>
	</target>

	<target name="multiple.target" description="update the multiple.target file based on new content in the local repo">
		<antcall target="target2targetTemplate" />
		<antcall target="updateTargetFile" />
	</target>

	<target name="unified.target" description="update the unified.target file based on new content in the local repo and replace URLs w/ single unified one">
		<antcall target="target2targetTemplate">
			<param name="outputFile" value="${tmpDir}/${unified.targetFile}.template" />
			<param name="replacement.URL" value="${unified.URL}" />
		</antcall>
		<antcall target="updateTargetFile">
			<param name="targetFile" value="${unified.targetFile}" />
		</antcall>
	</target>

	<target name="local.target" description="create a local.target file (based on new content in the local repo if available) and replace URLs w/ single local one">
		<antcall target="target2targetTemplate">
			<param name="outputFile" value="${tmpDir}/${local.targetFile}.template" />
			<param name="replacement.URL" value="${local.URL}" />
		</antcall>
		<antcall target="updateTargetFile">
			<param name="targetFile" value="${local.targetFile}" />
		</antcall>
	</target>

	<target name="updateTargetFile" description="load generated properties and resolve them in the template to create a new .target file">
		<property file="${tmpDir}/artifactVersions.properties" />
		<copy todir="${outputDir}" overwrite="true">
			<fileset file="${tmpDir}/${targetFile}.template" />
			<mapper type="merge" to="${targetFile}" />
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
	</target>

	<target name="cleanup" description="purge temporary dir">
		<delete dir="${tmpDir}" includeemptydirs="true" quiet="true" />
	</target>

	<target name="test.updateTargetFile" depends="check.content.xml, get.content.xml, copy.content.xml, contentXml2artifactVersions.xsl">
		<echo>Load *swtbot* properties from ${tmpDir}/artifactVersions.properties</echo>
		<loadfile srcfile="${tmpDir}/artifactVersions.properties" property="artifactVersionsPropertiesContents">
			<filterchain>
				<linecontains>
					<contains value="swtbot" />
					<contains value="feature.group" />
				</linecontains>
			</filterchain>
		</loadfile>
		<echo>${artifactVersionsPropertiesContents}</echo>

		<antcall target="target2targetTemplate">
			<param name="outputFile" value="${tmpDir}/${unified.targetFile}.template" />
			<param name="replacement.URL" value="${unified.URL}" />
		</antcall>
		<echo>Generated ${tmpDir}/${unified.targetFile}.template: </echo>
		<exec executable="egrep">
			<arg line="&quot;swtbot&quot; ${tmpDir}/${unified.targetFile}.template" />
		</exec>

		<antcall target="updateTargetFile">
			<param name="targetFile" value="${unified.targetFile}" />
		</antcall>
		<echo>--
If loaded version values (in artifactVersions.properties) do not match  
output below, an error has occurred or replace.versions is undefined.
--</echo>
		<exec executable="egrep">
			<arg line="&quot;swtbot.*feature.group&quot; ${unified.targetFile}" />
		</exec>


	</target>

</project>
