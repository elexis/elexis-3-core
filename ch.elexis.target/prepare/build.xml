<project default="build.local.target.platform.repo" name="target platform p2.mirror generator - ant script">
	<property name="targetFile" value="multiple.target" />

	<!-- if useLatest = true, omit versions from p2.mirror script to fetch latest version available; 
		 if useLatest = false, include versions and fetch specific versions requested. -->
	<property name="useLatest" value="false" />
	<property name="tmpdir" value="${java.io.tmpdir}/target-platform-build" />

	<condition property="WORKINGDIR" value="/home/hudson/static_build_env/jbds/tools/sources" else="${basedir}">
		<available file="/home/hudson/static_build_env/jbds" type="dir" />
	</condition>
	<mkdir dir="${WORKINGDIR}" />

	<condition property="COMMON_TOOLS" value="/home/hudson/static_build_env/jbds/tools" else="${java.io.tmpdir}">
		<available file="/home/hudson/static_build_env/jbds" type="dir" />
	</condition>
	<mkdir dir="${COMMON_TOOLS}" />

	<property name="repoDir" value="${WORKINGDIR}/REPO" />

	<!-- ********************************************************************************** -->

	<target name="help">
		<echo>This script, if run in its entirety, will:
			
	a) download features, plugins, binaries, and metadata from the site(s) specified
		in a given target platform, and create a local p2 repo
	b) generate a local.target file, which points at the generated local p2 repo

After running this script, publish this pom and *.target files to your local ~/.m2 repo:
	mvn clean install -f .../target-platform/pom.xml -P use.local.target
			
Then you can then refer to it in downstream builds using:
		mvn install -P local.target

------------------
			
Default target is:

	* build.local.target.platform.repo

Can also attempt to:

	* install.local.target.platform.repo

Thus, default operation is this (if run w/ these options or NO options):

	$ ant -DtargetFile=multiple.target build.local.target.platform.repo

To build an alternate target platform (eg., Juno) for JBT:

	$ ant -DtargetFile=multiple/multiple.target -DrepoDir=${WORKINGDIR}/JBT_REPO/ -Declipse.version=4.2 -Declipse.type=platform -Declipse.URL=http://www.eclipse.org/downloads/download.php?r=1\&amp;file=/eclipse/downloads/drops4/R-4.2-201206081400/

</echo>
	</target>

	<!-- do everything but tests -->
	<target name="all" depends="install" />

	<!-- to install from the target platform repo, first build the repo, then install using p2.director -->
	<target name="install" depends="build.local.target.platform.repo, install.local.target.platform.repo" />

	<target name="build.local.target.platform.repo" depends="init, get.arch, get.eclipse, gen.p2mirror.script, run.p2mirror.script, cleanup" />

	<!-- ********************************************************************************** -->

	<target name="init">
		<available file="${COMMON_TOOLS}/ant-contrib.jar" type="file" property="ant-contrib.jar.exists" />
		<antcall target="get.ant-contrib" />
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${COMMON_TOOLS}/ant-contrib.jar" />
			</classpath>
		</taskdef>
	</target>


	<target name="get.ant-contrib" unless="ant-contrib.jar.exists">
		<property name="ANTCONTRIB_MIRROR" value="http://download.elexis.info/elexis-server/misc/" />
		<get usetimestamp="true" dest="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip" src="${ANTCONTRIB_MIRROR}/ant-contrib-1.0b2-bin.zip" />
		<touch file="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip" />
		<mkdir dir="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_" />
		<unzip src="${COMMON_TOOLS}/ant-contrib-1.0b2-bin.zip" dest="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_" overwrite="true" />
		<copy file="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_/ant-contrib/lib/ant-contrib.jar" tofile="${COMMON_TOOLS}/ant-contrib.jar" failonerror="true" />
		<delete dir="${java.io.tmpdir}/ant-contrib-1.0b2-bin.zip_" includeemptydirs="true" quiet="true" />
	</target>

	<target name="get.arch">
		<condition property="ext" value="tar.gz" else="zip">
			<os family="unix" />
		</condition>
		<condition property="os1" value="linux-gtk" else="win32">
			<os family="unix" />
		</condition>
		<condition property="os" value="macosx-cocoa" else="${os1}">
			<os family="mac" />
		</condition>
		<if>
			<os family="unix" />
			<then>
				<available file="getArch.sh" property="getArchInSamePath" />
				<if>
					<isset property="getArchInSamePath" />
					<then>
						<property name="getArch" value="getArch.sh" />
					</then>
					<else>
						<property name="getArch" value="../getArch.sh" />
					</else>
				</if>

				<!-- Ant thinks that ${os.arch} == i386 for x86_64, so use `uname` instead -->
				<exec executable="bash" outputproperty="arch">
					<arg line="${getArch}" />
				</exec>
			</then>
			<else>
				<condition property="arch" value="x86_64" else="">
					<os arch="amd64" />
				</condition>
			</else>
		</if>
	</target>

	<!-- should work on osx-cocoa32, win32, lin32, lin64 -->
	<target name="get.eclipse">
		<!-- NOTE: must use same platform (50M) or SDK (103M - 168M) version as feature version on target platform, or will get install/update conflicts -->
		<property name="eclipse.version" value="4.5.1" />
		<property name="eclipse.URL" value="http://download.elexis.info/elexis-server/eclipse" />

		<if>
			<equals arg1="${arch}" arg2="x86" />
			<then>
				<property name="eclipse.file" value="eclipse-platform-${eclipse.version}-${os}.${ext}" />
			</then>
			<else>
				<property name="eclipse.file" value="eclipse-platform-${eclipse.version}-${os}-${arch}.${ext}" />
			</else>
		</if>

		<if>
			<not>
				<available file="${WORKINGDIR}/${eclipse.file}" type="file" />
			</not>
			<then>
				<get src="${eclipse.URL}/${eclipse.file}" dest="${WORKINGDIR}/${eclipse.file}" />
			</then>
		</if>

		<!-- purge previous eclipse install to avoid conflicts w/ Eclipse feature versions -->
		<delete dir="${WORKINGDIR}/eclipse-${eclipse.version}" includeemptydirs="true" quiet="true" />

		<untar compression="gzip" dest="${WORKINGDIR}/eclipse-${eclipse.version}" src="${WORKINGDIR}/${eclipse.file}" overwrite="true" />

		<!-- make eclipse executable -->
		<if>
			<not>
				<equals arg1="${os}" arg2="macosx-cocoa" />
			</not>
			<then>
				<chmod perm="+x" file="${WORKINGDIR}/eclipse-${eclipse.version}/eclipse/eclipse" />
			</then>
			<else>
				<symlink link="${WORKINGDIR}/eclipse-${eclipse.version}/eclipse" resource="${WORKINGDIR}/eclipse-${eclipse.version}/Eclipse.app/Contents/Eclipse" />
			</else>
		</if>

	</target>

	<target name="gen.p2mirror.script" description="use XSLT to generate a p2.mirror script from .target">
		<ant antfile="target2p2mirror.xml" />
	</target>

	<!-- /abs/path/to/eclipse -vm /opt/jdk1.6.0/bin/java -nosplash -data /tmp/workspace -consolelog -application 
			org.eclipse.ant.core.antRunner -f *.target.p2mirror.xml -Ddebug=true -DfollowStrict=true -DrepoDir=/tmp/REPO/ -->
	<target name="run.p2mirror.script" description="build target update site using p2.mirror">
		<java classname="org.eclipse.equinox.launcher.Main" fork="true" dir="${basedir}" failonerror="true">
			<classpath>
				<fileset dir="${WORKINGDIR}/eclipse-${eclipse.version}/eclipse/plugins" includes="org.eclipse.equinox.launcher_*.jar" />
			</classpath>
			<arg line=" -nosplash -data ${tmpdir}/workspace -consolelog -application org.eclipse.ant.core.antRunner" />
			<arg line=" -f ${targetFile}.p2mirror.xml -DfollowStrict=true -DrepoDir=${repoDir}" />
			<arg line=" -Ddebug=true -vmargs -Dosgi.locking=none" />
		</java>
	</target>

	<target name="update.target.file" description="optional step: use XSLT to update .target file from contents of local repo">
		<!--		<echo>
This step - calling targetUpdateFromRepo.xml - is no longer enabled to prevent the .target 
file from being stripped of duplicate IUs. Instead, generation is a one-way process: 

1. Manually update .target file
2. Generate .p2mirror.xml file, with useLatest=false
3. ...
4. Profit!</echo> -->
		<ant antfile="targetUpdateFromRepo.xml" />
	</target>

	<target name="cleanup">
		<delete dir="${tmpdir}" quiet="true" includeemptydirs="true" />
	</target>


	<target name="install.local.target.platform.repo" depends="init" description="use p2.director to install target platform into local eclipse">
		<!-- collect features to install -->
		<var name="install" value="" />
		<for param="featureJar">
			<path>
				<fileset dir="${repoDir}/features" includes="*.jar" />
			</path>
			<sequential>
				<var name="feature.jarfile" unset="true" />
				<var name="feature.id" unset="true" />
				<propertyregex property="feature.jarfile" defaultvalue="@{featureJar}" input="@{featureJar}" regexp=".+/features/([^/]+\.jar)" replace="\1" override="true" />
				<propertyregex property="feature.id" defaultvalue="${feature.jarfile}" input="${feature.jarfile}" regexp="([^_]+)_(\d+\.\d+\.\d+\..+)\.jar" replace="\1" override="true" />
				<propertyregex property="feature.id" defaultvalue="${feature.id}" input="${feature.id}" regexp="([^_]+)_(\d+\.\d+\.\d+)\.jar" replace="\1" override="true" />
				<var name="install" value="${install},${feature.id}.feature.group" />
				<var name="feature.jarfile" unset="true" />
				<var name="feature.id" unset="true" />
			</sequential>
		</for>
		<!-- trim prefix "," -->
		<propertyregex property="install" input="${install}" defaultvalue="${install}" regexp=",(.+)" replace="\1" override="true" />

		<!-- do install -->
		<antcall target="run.director">
			<param name="p2.director.installIU" value="${install}" />
			<param name="p2.director.install.path" value="${WORKINGDIR}/eclipse" />
			<param name="p2.director.input.repo" value="file://${repoDir}/" />
		</antcall>
	</target>

	<target name="run.director">
		<property name="p2.director.extraArgs" value="" />
		<property name="p2.director.installIU" value="${install}" />
		<property name="p2.director.install.path" value="${targetDir}" />
		<property name="p2.director.input.repo" value="jar:file://${sourceZip}!/" />
		<echo>
Source Repo(s): ${p2.director.input.repo}
Install Path: ${p2.director.install.path}
Feature(s) or Plugin(s) to Install:
${install}
 </echo>

		<mkdir dir="${p2.director.install.path}" />
		<chmod perm="+x" file="${p2.director.install.path}/eclipse" />
		<exec executable="${p2.director.install.path}/eclipse" failonerror="true" dir="${p2.director.install.path}" timeout="900000" taskname="p2.dir">
			<arg line=" -application org.eclipse.equinox.p2.director" />
			<arg line=" -nosplash" />
			<arg line=" --launcher.suppressErrors" />
			<arg line=" -consoleLog" />
			<arg line=" -flavor tooling" />
			<arg line=" -roaming" />
			<arg line=" -profile SDKProfile" />
			<arg line=" -destination ${p2.director.install.path}" />
			<arg line=" -bundlepool ${p2.director.install.path}" />
			<arg line=" -installIU ${p2.director.installIU}" />
			<arg line=" -metadataRepository ${p2.director.input.repo},file://${p2.director.install.path}/p2/org.eclipse.equinox.p2.engine/profileRegistry/SDKProfile.profile" />
			<arg line=" -artifactRepository ${p2.director.input.repo},file://${p2.director.install.path}" />
			<arg line=" -profileProperties org.eclipse.update.install.features=true" />
			<arg line=" -vmargs" />
			<arg line=" -Declipse.p2.data.area=${p2.director.install.path}/p2" />
			<arg line=" -Declipse.p2.MD5Check=false" />
		</exec>
	</target>
</project>
